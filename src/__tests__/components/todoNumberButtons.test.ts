/**
 * üî¥ Red Phase: TODOÁï™Âè∑„Éú„Çø„É≥„ÅÆË°®Á§∫„ÉÜ„Çπ„Éà
 * TDDÈñãÁô∫: „Éö„Éº„Ç∏„É≥„Ç∞„Å´ÂØæÂøú„Åó„ÅüÁï™Âè∑„Éú„Çø„É≥„ÇíË°®Á§∫„Åô„ÇãÊ©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà
 */

import { ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { createTodoNumberButtons } from '../../components/classificationResultEmbed';

describe('üî¥ Red Phase: TODOÁï™Âè∑„Éú„Çø„É≥„ÅÆË°®Á§∫„ÉÜ„Çπ„Éà', () => {
  test('TODO‰∏ÄË¶ßË°®Á§∫ÊôÇ„Å´1-10„ÅÆÁï™Âè∑„Éú„Çø„É≥„Åå2Ë°å„ÅßË°®Á§∫„Åï„Çå„Çã', () => {
    // Arrange
    const todoCount = 10;
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount);
    
    // Assert
    expect(buttonRows).toHaveLength(2); // 2Ë°å„ÅÆActionRow
    
    // 1Ë°åÁõÆ: 1-5
    const firstRow = buttonRows[0];
    expect(firstRow.components).toHaveLength(5);
    const firstButton = firstRow.components[0] as ButtonBuilder;
    expect((firstButton.data as any).label).toBe('1');
    expect((firstButton.data as any).custom_id).toBe('todo_number_1');
    expect(firstButton.data.style).toBe(ButtonStyle.Secondary);
    const fifthButton = firstRow.components[4] as ButtonBuilder;
    expect((fifthButton.data as any).label).toBe('5');
    expect((fifthButton.data as any).custom_id).toBe('todo_number_5');
    
    // 2Ë°åÁõÆ: 6-10
    const secondRow = buttonRows[1];
    expect(secondRow.components).toHaveLength(5);
    const sixthButton = secondRow.components[0] as ButtonBuilder;
    expect((sixthButton.data as any).label).toBe('6');
    expect((sixthButton.data as any).custom_id).toBe('todo_number_6');
    const tenthButton = secondRow.components[4] as ButtonBuilder;
    expect((tenthButton.data as any).label).toBe('10');
    expect((tenthButton.data as any).custom_id).toBe('todo_number_10');
  });

  test('TODO„Åå5‰ª∂„ÅÆÂ†¥Âêà„ÄÅÁï™Âè∑„Éú„Çø„É≥„ÅØ1Ë°å„Åß1-5„Åæ„ÅßË°®Á§∫„Åï„Çå„Çã', () => {
    // Arrange
    const todoCount = 5;
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount);
    
    // Assert
    expect(buttonRows).toHaveLength(1); // 1Ë°å„ÅÆActionRow
    
    const firstRow = buttonRows[0];
    expect(firstRow.components).toHaveLength(5);
    const firstButton = firstRow.components[0] as ButtonBuilder;
    expect((firstButton.data as any).label).toBe('1');
    const lastButton = firstRow.components[4] as ButtonBuilder;
    expect((lastButton.data as any).label).toBe('5');
  });

  test('TODO„Åå7‰ª∂„ÅÆÂ†¥Âêà„ÄÅÁï™Âè∑„Éú„Çø„É≥„ÅØ2Ë°å„Åß1-7„Åæ„ÅßË°®Á§∫„Åï„Çå„Çã', () => {
    // Arrange
    const todoCount = 7;
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount);
    
    // Assert
    expect(buttonRows).toHaveLength(2); // 2Ë°å„ÅÆActionRow
    
    // 1Ë°åÁõÆ: 1-5
    const firstRow = buttonRows[0];
    expect(firstRow.components).toHaveLength(5);
    
    // 2Ë°åÁõÆ: 6-7
    const secondRow = buttonRows[1];
    expect(secondRow.components).toHaveLength(2);
    const sixthButton = secondRow.components[0] as ButtonBuilder;
    expect((sixthButton.data as any).label).toBe('6');
    const seventhButton = secondRow.components[1] as ButtonBuilder;
    expect((seventhButton.data as any).label).toBe('7');
  });

  test('TODO„Åå0‰ª∂„ÅÆÂ†¥Âêà„ÄÅÁ©∫„ÅÆÈÖçÂàó„ÅåËøî„Åï„Çå„Çã', () => {
    // Arrange
    const todoCount = 0;
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount);
    
    // Assert
    expect(buttonRows).toHaveLength(0);
  });

  test('TODO„Åå11‰ª∂‰ª•‰∏ä„ÅÆÂ†¥Âêà„Åß„ÇÇ„ÄÅÊúÄÂ§ß10ÂÄã„ÅÆÁï™Âè∑„Éú„Çø„É≥„ÅÆ„ÅøË°®Á§∫„Åï„Çå„Çã', () => {
    // Arrange
    const todoCount = 15;
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount);
    
    // Assert
    expect(buttonRows).toHaveLength(2); // 2Ë°å„ÅÆActionRow
    
    // „Éú„Çø„É≥„ÅÆÁ∑èÊï∞„ÅØ10ÂÄã
    const totalButtons = buttonRows.reduce((sum: number, row: ActionRowBuilder<ButtonBuilder>) => sum + row.components.length, 0);
    expect(totalButtons).toBe(10);
    
    // ÊúÄÂæå„ÅÆ„Éú„Çø„É≥„ÅØ10Áï™
    const lastRow = buttonRows[1];
    const lastButton = lastRow.components[lastRow.components.length - 1] as ButtonBuilder;
    expect((lastButton.data as any).label).toBe('10');
  });

  test('ÂêÑÁï™Âè∑„Éú„Çø„É≥„Å´„ÅØÈÅ©Âàá„Å™„Ç´„Çπ„Çø„É†ID„ÅåË®≠ÂÆö„Åï„Çå„Çã', () => {
    // Arrange
    const todoCount = 3;
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount);
    
    // Assert
    const firstRow = buttonRows[0];
    const button1 = firstRow.components[0] as ButtonBuilder;
    const button2 = firstRow.components[1] as ButtonBuilder;
    const button3 = firstRow.components[2] as ButtonBuilder;
    expect((button1.data as any).custom_id).toBe('todo_number_1');
    expect((button2.data as any).custom_id).toBe('todo_number_2');
    expect((button3.data as any).custom_id).toBe('todo_number_3');
  });

  // „Éö„Éº„Ç∏„É≥„Ç∞ÂØæÂøú„ÅÆ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ
  test('„Éö„Éº„Ç∏2„Åß„ÅØ11-16„ÅÆÁï™Âè∑„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„ÇãÔºàstartIndex=10Ôºâ', () => {
    // Arrange
    const todoCount = 6;
    const startIndex = 10; // „Éö„Éº„Ç∏2„ÅÆ„Çπ„Çø„Éº„Éà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount, startIndex);
    
    // Assert
    expect(buttonRows).toHaveLength(2); // 2Ë°å„ÅÆActionRow
    
    // 1Ë°åÁõÆ: 11-15
    const firstRow = buttonRows[0];
    expect(firstRow.components).toHaveLength(5);
    const firstButton = firstRow.components[0] as ButtonBuilder;
    expect((firstButton.data as any).label).toBe('11');
    expect((firstButton.data as any).custom_id).toBe('todo_number_11');
    const fifthButton = firstRow.components[4] as ButtonBuilder;
    expect((fifthButton.data as any).label).toBe('15');
    expect((fifthButton.data as any).custom_id).toBe('todo_number_15');
    
    // 2Ë°åÁõÆ: 16
    const secondRow = buttonRows[1];
    expect(secondRow.components).toHaveLength(1);
    const sixthButton = secondRow.components[0] as ButtonBuilder;
    expect((sixthButton.data as any).label).toBe('16');
    expect((sixthButton.data as any).custom_id).toBe('todo_number_16');
  });

  test('„Éö„Éº„Ç∏3„Åß„ÅØ21-25„ÅÆÁï™Âè∑„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„ÇãÔºàstartIndex=20, todoCount=5Ôºâ', () => {
    // Arrange
    const todoCount = 5;
    const startIndex = 20; // „Éö„Éº„Ç∏3„ÅÆ„Çπ„Çø„Éº„Éà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount, startIndex);
    
    // Assert
    expect(buttonRows).toHaveLength(1); // 1Ë°å„ÅÆActionRow
    
    const firstRow = buttonRows[0];
    expect(firstRow.components).toHaveLength(5);
    const firstButton = firstRow.components[0] as ButtonBuilder;
    expect((firstButton.data as any).label).toBe('21');
    expect((firstButton.data as any).custom_id).toBe('todo_number_21');
    const lastButton = firstRow.components[4] as ButtonBuilder;
    expect((lastButton.data as any).label).toBe('25');
    expect((lastButton.data as any).custom_id).toBe('todo_number_25');
  });

  test('startIndex„ÅåÁúÅÁï•„Åï„Çå„ÅüÂ†¥Âêà„ÅØÂæìÊù•ÈÄö„Çä1„Åã„ÇâÂßã„Åæ„Çã', () => {
    // Arrange
    const todoCount = 3;
    
    // Act
    const buttonRows = createTodoNumberButtons(todoCount);
    
    // Assert
    const firstRow = buttonRows[0];
    const firstButton = firstRow.components[0] as ButtonBuilder;
    expect((firstButton.data as any).label).toBe('1');
    expect((firstButton.data as any).custom_id).toBe('todo_number_1');
  });
});