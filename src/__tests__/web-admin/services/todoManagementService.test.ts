/**
 * TodoManagementServiceÂçò‰Ωì„ÉÜ„Çπ„Éà
 * Phase 2: TODOÁÆ°ÁêÜÊ©üËÉΩ„ÅÆTDDÂÆüË£Ö
 */

import { TodoManagementService } from '../../../web-admin/services/todoManagementService';
import { AdminRepository } from '../../../web-admin/repositories/adminRepository';
import { SqliteActivityLogRepository } from '../../../repositories/sqliteActivityLogRepository';
import { TodoTask, TodoStatus, TodoPriority } from '../../../types/todo';
import { getTestDbPath } from '../../../utils/testDatabasePath';

// „É¢„ÉÉ„ÇØ
jest.mock('../../../web-admin/repositories/adminRepository');
jest.mock('../../../repositories/sqliteActivityLogRepository');
const mockAdminRepository = AdminRepository as jest.MockedClass<typeof AdminRepository>;
const mockSqliteRepo = SqliteActivityLogRepository as jest.MockedClass<typeof SqliteActivityLogRepository>;

describe('TodoManagementService', () => {
  let service: TodoManagementService;
  let mockRepository: jest.Mocked<AdminRepository>;

  beforeEach(async () => {
    const testDbPath = getTestDbPath(__filename);
    const mockSqliteInstance = new mockSqliteRepo(testDbPath) as jest.Mocked<SqliteActivityLogRepository>;
    // „É¢„ÉÉ„ÇØ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíË®≠ÂÆö
    mockSqliteInstance.initializeDatabase = jest.fn().mockResolvedValue(undefined);
    
    mockRepository = new mockAdminRepository(mockSqliteInstance) as jest.Mocked<AdminRepository>;
    service = new TodoManagementService(mockRepository);
  });

  describe('üî¥ Red Phase 2-1: TODOÂü∫Êú¨CRUDÊìç‰Ωú', () => {
    test('Êñ∞„Åó„ÅÑTODO„Çø„Çπ„ÇØ„Çí‰ΩúÊàê„Åß„Åç„Çã', async () => {
      // Arrange
      const newTodo = {
        userId: 'test-user-123',
        title: 'Test TODO Task',
        description: 'Test description',
        priority: 'high' as TodoPriority,
        dueDate: '2024-12-31'
      };

      const expectedTodo: TodoTask = {
        id: 'todo-123',
        userId: 'test-user-123',
        title: 'Test TODO Task',
        description: 'Test description',
        status: 'pending',
        priority: 'high',
        dueDate: '2024-12-31',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z'
      };

      mockRepository.createTodoTask.mockResolvedValue(expectedTodo);

      // Act
      const result = await service.createTodo(newTodo);

      // Assert
      expect(result).toEqual(expectedTodo);
      expect(mockRepository.createTodoTask).toHaveBeenCalledWith(newTodo);
    });

    test('TODO„Çø„Çπ„ÇØ„ÇíÊõ¥Êñ∞„Åß„Åç„Çã', async () => {
      // Arrange
      const todoId = 'todo-123';
      const updates = {
        title: 'Updated TODO Task',
        status: 'in_progress' as TodoStatus,
        priority: 'medium' as TodoPriority
      };

      const updatedTodo: TodoTask = {
        id: todoId,
        userId: 'test-user-123',
        title: 'Updated TODO Task',
        description: 'Test description',
        status: 'in_progress',
        priority: 'medium',
        dueDate: '2024-12-31',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T01:00:00.000Z'
      };

      mockRepository.updateTodoTask.mockResolvedValue(updatedTodo);

      // Act
      const result = await service.updateTodo(todoId, updates);

      // Assert
      expect(result).toEqual(updatedTodo);
      expect(mockRepository.updateTodoTask).toHaveBeenCalledWith(todoId, updates);
    });

    test('TODO„Çø„Çπ„ÇØ„ÇíÂâäÈô§„Åß„Åç„Çã', async () => {
      // Arrange
      const todoId = 'todo-123';
      mockRepository.deleteTodoTask.mockResolvedValue(true);

      // Act
      const result = await service.deleteTodo(todoId);

      // Assert
      expect(result).toBe(true);
      expect(mockRepository.deleteTodoTask).toHaveBeenCalledWith(todoId);
    });

    test('TODO„Çø„Çπ„ÇØ„ÇíÂèñÂæó„Åß„Åç„Çã', async () => {
      // Arrange
      const todoId = 'todo-123';
      const expectedTodo: TodoTask = {
        id: todoId,
        userId: 'test-user-123',
        title: 'Test TODO Task',
        description: 'Test description',
        status: 'pending',
        priority: 'high',
        dueDate: '2024-12-31',
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z'
      };

      mockRepository.getTodoTaskById.mockResolvedValue(expectedTodo);

      // Act
      const result = await service.getTodoById(todoId);

      // Assert
      expect(result).toEqual(expectedTodo);
      expect(mockRepository.getTodoTaskById).toHaveBeenCalledWith(todoId);
    });

    test('Â≠òÂú®„Åó„Å™„ÅÑTODO„Çø„Çπ„ÇØ„ÇíÂèñÂæó„Åó„Çà„ÅÜ„Å®„Åô„Çã„Å®null„ÇíËøî„Åô', async () => {
      // Arrange
      const todoId = 'non-existent-todo';
      mockRepository.getTodoTaskById.mockResolvedValue(null);

      // Act
      const result = await service.getTodoById(todoId);

      // Assert
      expect(result).toBeNull();
      expect(mockRepository.getTodoTaskById).toHaveBeenCalledWith(todoId);
    });
  });

  describe('üî¥ Red Phase 2-2: TODO‰∏ÄÊã¨Êìç‰Ωú', () => {
    test('Ë§áÊï∞„ÅÆTODO„Çø„Çπ„ÇØ„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Çí‰∏ÄÊã¨Â§âÊõ¥„Åß„Åç„Çã', async () => {
      // Arrange
      const todoIds = ['todo-1', 'todo-2', 'todo-3'];
      const newStatus: TodoStatus = 'completed';
      const expectedCount = 3;

      mockRepository.bulkUpdateTodoStatus.mockResolvedValue(expectedCount);

      // Act
      const result = await service.bulkUpdateStatus(todoIds, newStatus);

      // Assert
      expect(result).toBe(expectedCount);
      expect(mockRepository.bulkUpdateTodoStatus).toHaveBeenCalledWith(todoIds, newStatus);
    });

    test('Ë§áÊï∞„ÅÆTODO„Çø„Çπ„ÇØ„Çí‰∏ÄÊã¨ÂâäÈô§„Åß„Åç„Çã', async () => {
      // Arrange
      const todoIds = ['todo-1', 'todo-2', 'todo-3'];
      const expectedCount = 3;

      mockRepository.bulkDeleteTodos.mockResolvedValue(expectedCount);

      // Act
      const result = await service.bulkDelete(todoIds);

      // Assert
      expect(result).toBe(expectedCount);
      expect(mockRepository.bulkDeleteTodos).toHaveBeenCalledWith(todoIds);
    });
  });

  describe('üî¥ Red Phase 2-3: TODOÊ§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„É™„É≥„Ç∞', () => {
    test('„É¶„Éº„Ç∂„ÉºÂà•TODO‰∏ÄË¶ß„ÇíÂèñÂæó„Åß„Åç„Çã', async () => {
      // Arrange
      const userId = 'test-user-123';
      const filters = {
        status: 'pending' as TodoStatus,
        priority: 'high' as TodoPriority
      };
      const options = {
        page: 1,
        limit: 10
      };

      const expectedTodos: TodoTask[] = [
        {
          id: 'todo-1',
          userId: 'test-user-123',
          title: 'High Priority TODO',
          description: 'Urgent task',
          status: 'pending',
          priority: 'high',
          dueDate: '2024-12-31',
          createdAt: '2024-01-01T00:00:00.000Z',
          updatedAt: '2024-01-01T00:00:00.000Z'
        }
      ];

      mockRepository.getTodosByUserId.mockResolvedValue(expectedTodos);

      // Act
      const result = await service.getTodosByUser(userId, filters, options);

      // Assert
      expect(result).toEqual(expectedTodos);
      expect(mockRepository.getTodosByUserId).toHaveBeenCalledWith(userId, filters, options);
    });

    test('ÊúüÈôêÂàá„Çå„ÅÆTODO„Çø„Çπ„ÇØ„ÇíÂèñÂæó„Åß„Åç„Çã', async () => {
      // Arrange
      const expectedOverdueTodos: TodoTask[] = [
        {
          id: 'todo-overdue',
          userId: 'test-user-123',
          title: 'Overdue TODO',
          description: 'This is overdue',
          status: 'pending',
          priority: 'high',
          dueDate: '2024-01-01',
          createdAt: '2024-01-01T00:00:00.000Z',
          updatedAt: '2024-01-01T00:00:00.000Z'
        }
      ];

      mockRepository.getOverdueTodos.mockResolvedValue(expectedOverdueTodos);

      // Act
      const result = await service.getOverdueTodos();

      // Assert
      expect(result).toEqual(expectedOverdueTodos);
      expect(mockRepository.getOverdueTodos).toHaveBeenCalled();
    });
  });

  describe('üî¥ Red Phase 2-4: „Éê„É™„Éá„Éº„Ç∑„Éß„É≥', () => {
    test('ÁÑ°Âäπ„Å™„Éá„Éº„Çø„ÅßTODO‰ΩúÊàê„ÇíË©¶„Åø„Çã„Å®„Ç®„É©„Éº„ÇíÊäï„Åí„Çã', async () => {
      // Arrange
      const invalidTodo = {
        userId: '', // Á©∫„ÅÆ„É¶„Éº„Ç∂„ÉºID
        title: '',  // Á©∫„ÅÆ„Çø„Ç§„Éà„É´
        description: 'Test description',
        priority: 'invalid' as TodoPriority, // ÁÑ°Âäπ„Å™ÂÑ™ÂÖàÂ∫¶
        dueDate: 'invalid-date' // ÁÑ°Âäπ„Å™Êó•‰ªò
      };

      // Act & Assert
      await expect(service.createTodo(invalidTodo)).rejects.toThrow('Invalid TODO data');
    });

    test('ÁÑ°Âäπ„Å™„Çπ„ÉÜ„Éº„Çø„Çπ„ÅßTODOÊõ¥Êñ∞„ÇíË©¶„Åø„Çã„Å®„Ç®„É©„Éº„ÇíÊäï„Åí„Çã', async () => {
      // Arrange
      const todoId = 'todo-123';
      const invalidUpdates = {
        status: 'invalid-status' as TodoStatus
      };

      // Act & Assert
      await expect(service.updateTodo(todoId, invalidUpdates)).rejects.toThrow('Invalid TODO status');
    });
  });
});