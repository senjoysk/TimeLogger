/**
 * TodoCommandHandler „ÅÆ„ÉÜ„Çπ„Éà
 * TDDÈñãÁô∫: Red Phase - „Åæ„ÅöÂ§±Êïó„Åô„Çã„ÉÜ„Çπ„Éà„ÇíÊõ∏„Åè
 */

import { Message, ButtonInteraction, User, Guild } from 'discord.js';
import { TodoCommandHandler } from '../../handlers/todoCommandHandler';
import { ITodoRepository, IMessageClassificationRepository } from '../../repositories/interfaces';
import { GeminiService } from '../../services/geminiService';
import { MessageClassificationService } from '../../services/messageClassificationService';
import { Todo, CreateTodoRequest, ClassificationResult } from '../../types/todo';

// „É¢„ÉÉ„ÇØ„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÂÆüË£Ö
class MockTodoRepository implements ITodoRepository {
  private todos: Todo[] = [];
  private nextId = 1;

  async createTodo(request: CreateTodoRequest): Promise<Todo> {
    const todo: Todo = {
      id: `todo-${this.nextId++}`,
      userId: request.userId,
      content: request.content,
      status: 'pending',
      priority: request.priority || 0,
      dueDate: request.dueDate,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      completedAt: undefined,
      sourceType: request.sourceType || 'manual',
      relatedActivityId: request.relatedActivityId,
      aiConfidence: request.aiConfidence
    };
    this.todos.push(todo);
    return todo;
  }

  async getTodoById(id: string): Promise<Todo | null> {
    return this.todos.find(todo => todo.id === id) || null;
  }

  async getTodosByUserId(userId: string): Promise<Todo[]> {
    return this.todos.filter(todo => todo.userId === userId);
  }

  async updateTodo(id: string, update: any): Promise<void> {
    const todo = this.todos.find(t => t.id === id);
    if (todo) {
      Object.assign(todo, update);
      todo.updatedAt = new Date().toISOString();
    }
  }

  async updateTodoStatus(id: string, status: any): Promise<void> {
    const todo = this.todos.find(t => t.id === id);
    if (todo) {
      todo.status = status;
      todo.updatedAt = new Date().toISOString();
      if (status === 'completed') {
        todo.completedAt = new Date().toISOString();
      }
    }
  }

  async deleteTodo(id: string): Promise<void> {
    const index = this.todos.findIndex(t => t.id === id);
    if (index !== -1) {
      this.todos.splice(index, 1);
    }
  }

  async searchTodos(userId: string, keyword: string): Promise<Todo[]> {
    return this.todos.filter(todo => 
      todo.userId === userId && 
      todo.content.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  async getTodoStats() { 
    return { 
      total: 0, 
      pending: 0, 
      completed: 0, 
      inProgress: 0,
      cancelled: 0,
      todayCompleted: 0,
      weekCompleted: 0
    }; 
  }
  async getTodosWithDueDate() { return []; }
  async getTodosByActivityId() { return []; }
  async getTodosByDateRange() { return []; }
  async getTodosByStatusOptimized(userId: string, statuses: string[]) { 
    return this.todos.filter(todo => 
      todo.userId === userId && 
      statuses.includes(todo.status)
    ); 
  }
}

class MockMessageClassificationRepository implements IMessageClassificationRepository {
  async recordClassification() { return {} as any; }
  async updateClassificationFeedback() {}
  async getClassificationAccuracy() { return []; }
  async getClassificationHistory() { return []; }
}

class MockGeminiService {
  async classifyMessageWithAI(message: string): Promise<ClassificationResult> {
    return {
      classification: 'TODO',
      confidence: 0.8,
      reason: '„É¢„ÉÉ„ÇØAIÂàÜÊûêÁµêÊûú'
    };
  }
}

class MockMessageClassificationService {
  async classifyMessage(message: string): Promise<ClassificationResult> {
    if (message.includes('TODO')) {
      return {
        classification: 'TODO',
        confidence: 0.9,
        reason: 'TODO„Ç≠„Éº„ÉØ„Éº„Éâ„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô'
      };
    }
    return {
      classification: 'UNCERTAIN',
      confidence: 0.3,
      reason: 'ÂàÜÈ°û„ÅåÂõ∞Èõ£„Åß„Åô'
    };
  }
}

// Discord.js„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆ„É¢„ÉÉ„ÇØ
const createMockMessage = (content: string, userId: string = 'test-user'): any => ({
  content,
  author: { id: userId } as User,
  reply: jest.fn().mockResolvedValue({}),
  guild: {} as Guild
});

const createMockButtonInteraction = (customId: string, userId: string = 'test-user'): any => ({
  customId,
  user: { id: userId } as User,
  reply: jest.fn().mockResolvedValue({}),
  update: jest.fn().mockResolvedValue({}),
  replied: false
});

// ActivityLogService„ÅÆ„É¢„ÉÉ„ÇØ
class MockActivityLogService {
  recordActivity = jest.fn().mockResolvedValue({
    id: 'log-1',
    userId: 'test-user',
    content: '„ÉÜ„Çπ„ÉàÊ¥ªÂãï',
    businessDate: '2024-01-07',
    timestamp: new Date().toISOString()
  });
}

describe('TodoCommandHandler', () => {
  let handler: TodoCommandHandler;
  let mockTodoRepo: MockTodoRepository;
  let mockClassificationRepo: MockMessageClassificationRepository;
  let mockGeminiService: MockGeminiService;
  let mockClassificationService: MockMessageClassificationService;
  let mockActivityLogService: MockActivityLogService;

  beforeEach(() => {
    mockTodoRepo = new MockTodoRepository();
    mockClassificationRepo = new MockMessageClassificationRepository();
    mockGeminiService = new MockGeminiService();
    mockClassificationService = new MockMessageClassificationService();
    mockActivityLogService = new MockActivityLogService();
    
    handler = new TodoCommandHandler(
      mockTodoRepo,
      mockClassificationRepo,
      mockGeminiService as any,
      mockClassificationService as any,
      mockActivityLogService as any
    );
  });

  afterEach(() => {
    // „É™„ÇΩ„Éº„Çπ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    if (handler && typeof handler.destroy === 'function') {
      handler.destroy();
    }
  });

  describe('handleCommand', () => {
    test('TODO‰∏ÄË¶ßË°®Á§∫„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´TODO„Çí‰ΩúÊàê
      await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: '„ÉÜ„Çπ„ÉàÁî®TODO'
      });

      const message = createMockMessage('!todo', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall.embeds[0].data.title).toBe('üìã TODO‰∏ÄË¶ß');
    });

    test('TODOËøΩÂä†„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      const message = createMockMessage('!todo add Êñ∞„Åó„ÅÑTODO', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['add', 'Êñ∞„Åó„ÅÑTODO'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('‚úÖ TODO„ÄåÊñ∞„Åó„ÅÑTODO„Äç„ÇíËøΩÂä†„Åó„Åæ„Åó„ÅüÔºÅ');
      
      const todos = await mockTodoRepo.getTodosByUserId('test-user');
      expect(todos).toHaveLength(1);
      expect(todos[0].content).toBe('Êñ∞„Åó„ÅÑTODO');
    });

    test('TODOÂÆå‰∫Ü„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´TODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: '„ÉÜ„Çπ„ÉàÁî®TODO'
      });

      const message = createMockMessage(`!todo done ${todo.id}`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['done', todo.id], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith(`üéâ TODO„Äå${todo.content}„Äç„ÇíÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ`);
      
      const updatedTodo = await mockTodoRepo.getTodoById(todo.id);
      expect(updatedTodo?.status).toBe('completed');
    });

    test('TODOÁ∑®ÈõÜ„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´TODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: 'ÂÖÉ„ÅÆTODO'
      });

      const message = createMockMessage(`!todo edit ${todo.id} Á∑®ÈõÜ„Åï„Çå„ÅüTODO`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['edit', todo.id, 'Á∑®ÈõÜ„Åï„Çå„ÅüTODO'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('‚úèÔ∏è TODO„ÄåÂÖÉ„ÅÆTODO„Äç„Çí„ÄåÁ∑®ÈõÜ„Åï„Çå„ÅüTODO„Äç„Å´Á∑®ÈõÜ„Åó„Åæ„Åó„ÅüÔºÅ');
      
      const updatedTodo = await mockTodoRepo.getTodoById(todo.id);
      expect(updatedTodo?.content).toBe('Á∑®ÈõÜ„Åï„Çå„ÅüTODO');
    });

    test('TODOÂâäÈô§„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´TODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: '„ÉÜ„Çπ„ÉàÁî®TODO'
      });

      const message = createMockMessage(`!todo delete ${todo.id}`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['delete', todo.id], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith(`üóëÔ∏è TODO„Äå${todo.content}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ`);
      
      const deletedTodo = await mockTodoRepo.getTodoById(todo.id);
      expect(deletedTodo).toBeNull();
    });

    test('TODOÊ§úÁ¥¢„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // Ë§áÊï∞„ÅÆTODO„Çí‰ΩúÊàê
      await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: 'Ë≥áÊñô„Çí‰ΩúÊàê„Åô„Çã'
      });
      
      await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: '‰ºöË≠∞„Å´ÂèÇÂä†„Åô„Çã'
      });

      const message = createMockMessage('!todo search Ë≥áÊñô', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['search', 'Ë≥áÊñô'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall.embeds[0].data.title).toBe('üîç Ê§úÁ¥¢ÁµêÊûú: "Ë≥áÊñô"');
    });

    test('„Éò„É´„Éó„Ç≥„Éû„É≥„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      const message = createMockMessage('!todo help', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['help'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall.embeds[0].data.title).toBe('üìã TODO„Ç≥„Éû„É≥„Éâ„Éò„É´„Éó');
    });

    test('‰∏çÊ≠£„Å™„Ç≥„Éû„É≥„Éâ„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const message = createMockMessage('!todo add', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['add'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyText = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyText).toContain('‚ùå');
      expect(replyText).toContain('TODOÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    });

    test('Â≠òÂú®„Åó„Å™„ÅÑTODO„Å´ÂØæ„Åô„ÇãÊìç‰Ωú„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const message = createMockMessage('!todo done invalid-id', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['done', 'invalid-id'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('‚ùå ÊåáÂÆö„Åï„Çå„ÅüTODO„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
    });

    test('‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆTODO„Å´ÂØæ„Åô„ÇãÊìç‰Ωú„ÅåÊãíÂê¶„Åï„Çå„Çã', async () => {
      // ‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆTODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'other-user',
        content: '‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆTODO'
      });

      const message = createMockMessage(`!todo done ${todo.id}`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['done', todo.id], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('‚ùå ÊåáÂÆö„Åï„Çå„ÅüTODO„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
    });
  });

  describe('handleMessageClassification', () => {
    test('TODO„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÊ≠£„Åó„ÅèÂàÜÈ°û„Åï„Çå„Çã', async () => {
      const message = createMockMessage('„Éó„É¨„Çº„É≥Ë≥áÊñô„ÇíTODO„Å®„Åó„Å¶‰ΩúÊàê„Åô„Çã', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleMessageClassification(message, 'test-user', 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall).toHaveProperty('components');
      expect(replyCall.embeds[0].data.title).toBe('üìã AIÂàÜÊûêÁµêÊûú');
    });

    test('‰∏çÊòéÁ¢∫„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      const message = createMockMessage('„ÅÜ„Éº„Çì', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleMessageClassification(message, 'test-user', 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall.embeds[0].data.title).toBe('‚ùì AIÂàÜÊûêÁµêÊûú');
    });
  });

  describe('ÂàÜÈ°û„Éú„Çø„É≥Âá¶ÁêÜ', () => {
    test('TODO„Å®„Åó„Å¶Á¢∫Ë™ç„Åô„Çã„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´ÂàÜÈ°ûÁµêÊûú„ÇíË®≠ÂÆö
      const sessionId = 'test-session-123';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '„Éó„É¨„Çº„É≥Ë≥áÊñô„Çí‰ΩúÊàê„Åô„Çã',
        result: {
          classification: 'TODO',
          confidence: 0.9,
          reason: 'TODO„Ç≠„Éº„ÉØ„Éº„Éâ„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(`confirm_TODO_${sessionId}`, 'test-user') as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.update).toHaveBeenCalled();
      const updateCall = (interaction.update as jest.Mock).mock.calls[0][0];
      expect(updateCall.embeds[0].data.title).toBe('‚úÖ TODO‰ΩúÊàêÂÆå‰∫Ü');
      
      // TODO„ÅåÂÆüÈöõ„Å´‰ΩúÊàê„Åï„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      const todos = await mockTodoRepo.getTodosByUserId('test-user');
      expect(todos).toHaveLength(1);
      expect(todos[0].content).toBe('„Éó„É¨„Çº„É≥Ë≥áÊñô„Çí‰ΩúÊàê„Åô„Çã');
      expect(todos[0].sourceType).toBe('ai_suggested');
    });

    test('ÁÑ°Ë¶ñ„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      const sessionId = 'test-session-456';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '„Å©„ÅÜ„Åß„ÇÇ„ÅÑ„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏',
        result: {
          classification: 'UNCERTAIN',
          confidence: 0.3,
          reason: 'ÂàÜÈ°û„ÅåÂõ∞Èõ£„Åß„Åô'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(`ignore_${sessionId}`, 'test-user') as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.update).toHaveBeenCalled();
      const updateCall = (interaction.update as jest.Mock).mock.calls[0][0];
      expect(updateCall.content).toBe('‚ùå „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁÑ°Ë¶ñ„Åó„Åæ„Åó„Åü„ÄÇ');
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂâäÈô§„Åï„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(activeSessions.has(sessionId)).toBe(false);
    });

    test('Â≠òÂú®„Åó„Å™„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const interaction = createMockButtonInteraction('confirm_TODO_nonexistent-session', 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toBe('‚ùå „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åã„ÄÅÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
      expect(replyCall.ephemeral).toBe(true);
    });

    test('‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Çã', async () => {
      const sessionId = 'test-session-789';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'other-user',
        originalMessage: '‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏',
        result: {
          classification: 'TODO',
          confidence: 0.8,
          reason: '„ÉÜ„Çπ„Éà'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(`confirm_TODO_${sessionId}`, 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toBe('‚ùå „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åã„ÄÅÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
      expect(replyCall.ephemeral).toBe(true);
    });

    test('ÂàÜÈ°ûÂ§âÊõ¥„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      const sessionId = 'test-session-change';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '‰ºöË≠∞„ÅÆÂÜÖÂÆπ„Çí„É°„É¢',
        result: {
          classification: 'UNCERTAIN',
          confidence: 0.4,
          reason: 'ÂàÜÈ°û„ÅåÂõ∞Èõ£'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(`classify_MEMO_${sessionId}`, 'test-user') as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.update).toHaveBeenCalled();
      const updateCall = (interaction.update as jest.Mock).mock.calls[0][0];
      expect(updateCall.content).toBe('üìÑ „É°„É¢„Å®„Åó„Å¶‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü„ÄÇ');
    });

    test('Ê¥ªÂãï„É≠„Ç∞„Å®„Åó„Å¶ÂàÜÈ°û„Åô„Çã„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ÂÆüÈöõ„ÅÆÊú¨Áï™Áí∞Â¢É„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥IDÂΩ¢Âºè„Çí‰ΩøÁî®
      const sessionId = '770478489203507241_1736226160123_abc123';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '‰ºöË≠∞„Å´ÂèÇÂä†„Åó„Åü',
        result: {
          classification: 'TODO',
          confidence: 0.7,
          reason: 'TODO„Å®Âà§ÂÆö„Åï„Çå„Åü„ÅåÊ¥ªÂãï„É≠„Ç∞„ÅåÈÅ©Âàá'
        },
        timestamp: new Date()
      });

      // activity_log„ÇíÂê´„ÇÄ„Ç´„Çπ„Çø„É†ID„Åß„ÉÜ„Çπ„Éà
      const interaction = createMockButtonInteraction(
        `classify_activity_log_${sessionId}`, 
        'test-user'
      ) as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.update).toHaveBeenCalled();
      const updateCall = (interaction.update as jest.Mock).mock.calls[0][0];
      expect(updateCall.embeds[0].data.title).toBe('üìù Ê¥ªÂãï„É≠„Ç∞‰ΩúÊàêÂÆå‰∫Ü');
      expect(updateCall.embeds[0].data.description).toContain('‰ºöË≠∞„Å´ÂèÇÂä†„Åó„Åü');
      
      // ActivityLogService„ÅåÂëº„Å∞„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(mockActivityLogService.recordActivity).toHaveBeenCalledWith(
        'test-user',
        '‰ºöË≠∞„Å´ÂèÇÂä†„Åó„Åü',
        'Asia/Tokyo'
      );
    });

    test('Ë§áÊï∞„Éú„Çø„É≥„ÅÆÈÄ£Á∂öÊìç‰Ωú„Åß„Çª„ÉÉ„Ç∑„Éß„É≥„Åå‰øùÊåÅ„Åï„Çå„Çã', async () => {
      const sessionId = 'test-session-multiple';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏',
        result: {
          classification: 'TODO',
          confidence: 0.8,
          reason: 'TODOÂÄôË£ú'
        },
        timestamp: new Date()
      });

      // ÊúÄÂàù„ÅÆ„Éú„Çø„É≥Êìç‰ΩúÔºàÁÑ°Ë¶ñÔºâ- ignore„Éú„Çø„É≥„ÅÆ„Ç´„Çπ„Çø„É†ID„ÅØ type „Åå„Å™„ÅÑ
      const ignoreInteraction = createMockButtonInteraction(
        `ignore_${sessionId}`, 
        'test-user'
      ) as ButtonInteraction;
      ignoreInteraction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(ignoreInteraction, 'test-user', 'Asia/Tokyo');
      
      // ignore„Éú„Çø„É≥„Åß„ÅØ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂâäÈô§„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(activeSessions.has(sessionId)).toBe(false);
      
      // Êñ∞„Åó„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰ΩúÊàê
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏2',
        result: {
          classification: 'TODO',
          confidence: 0.8,
          reason: 'TODOÂÄôË£ú'
        },
        timestamp: new Date()
      });
      
      // TODO„Éú„Çø„É≥„ÇíÊäº„Åô
      const todoInteraction = createMockButtonInteraction(
        `confirm_todo_${sessionId}`, 
        'test-user'
      ) as ButtonInteraction;
      todoInteraction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(todoInteraction, 'test-user', 'Asia/Tokyo');
      
      // Âá¶ÁêÜÂæå„Å´„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂâäÈô§„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(activeSessions.has(sessionId)).toBe(false);
    });
  });

  describe('handleButtonInteraction', () => {
    test('TODOÂÆå‰∫Ü„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´TODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: '„ÉÜ„Çπ„ÉàÁî®TODO'
      });

      const interaction = createMockButtonInteraction(`todo_complete_${todo.id}`, 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toContain('üéâ');
      expect(replyCall.content).toContain('ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
      
      const updatedTodo = await mockTodoRepo.getTodoById(todo.id);
      expect(updatedTodo?.status).toBe('completed');
    });

    test('TODOÈñãÂßã„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´TODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: '„ÉÜ„Çπ„ÉàÁî®TODO'
      });

      const interaction = createMockButtonInteraction(`todo_start_${todo.id}`, 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toContain('üöÄ');
      expect(replyCall.content).toContain('ÈñãÂßã„Åó„Åæ„Åó„Åü');
      
      const updatedTodo = await mockTodoRepo.getTodoById(todo.id);
      expect(updatedTodo?.status).toBe('in_progress');
    });

    test('TODOÂâäÈô§„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
      // ‰∫ãÂâç„Å´TODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: '„ÉÜ„Çπ„ÉàÁî®TODO'
      });

      const interaction = createMockButtonInteraction(`todo_delete_${todo.id}`, 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toContain('üóëÔ∏è');
      expect(replyCall.content).toContain('ÂâäÈô§„Åó„Åæ„Åó„Åü');
      
      const deletedTodo = await mockTodoRepo.getTodoById(todo.id);
      expect(deletedTodo).toBeNull();
    });

    test('Â≠òÂú®„Åó„Å™„ÅÑTODO„Å´ÂØæ„Åô„Çã„Éú„Çø„É≥Êìç‰Ωú„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const interaction = createMockButtonInteraction('todo_complete_invalid-id', 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toBe('‚ùå TODO„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
      expect(replyCall.ephemeral).toBe(true);
    });

    test('‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆTODO„Å´ÂØæ„Åô„Çã„Éú„Çø„É≥Êìç‰Ωú„ÅåÊãíÂê¶„Åï„Çå„Çã', async () => {
      // ‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆTODO„Çí‰ΩúÊàê
      const todo = await mockTodoRepo.createTodo({
        userId: 'other-user',
        content: '‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆTODO'
      });

      const interaction = createMockButtonInteraction(`todo_complete_${todo.id}`, 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toBe('‚ùå TODO„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
      expect(replyCall.ephemeral).toBe(true);
    });

    test('ÁÑ°Âäπ„Å™„Ç´„Çπ„Çø„É†ID„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const interaction = createMockButtonInteraction('invalid_button_id', 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toBe('‚ùå Êú™Áü•„ÅÆ„Éú„Çø„É≥Êìç‰Ωú„Åß„Åô„ÄÇ');
      expect(replyCall.ephemeral).toBe(true);
    });
  });

  describe('„Ç´„Çπ„Çø„É†IDËß£Êûê„ÅÆÂ¢ÉÁïå„Ç±„Éº„Çπ', () => {
    test.each([
      // [„Ç´„Çπ„Çø„É†ID, ÊúüÂæÖ„Åï„Çå„Çãaction, ÊúüÂæÖ„Åï„Çå„Çãtype, ÊúüÂæÖ„Åï„Çå„ÇãsessionId]
      ['confirm_todo_session123', 'confirm', 'todo', 'session123'],
      ['classify_activity_log_session123', 'classify', 'activity_log', 'session123'],
      ['classify_activity_log_user_12345_abc', 'classify', 'activity_log', 'user_12345_abc'],
      ['ignore_session123', 'ignore', 'session123', 'session123'],  // ignore„ÅØtype„Åå„Å™„ÅÑ
      ['confirm_activity_log_complex_session_id_123', 'confirm', 'activity_log', 'complex_session_id_123'],
      ['todo_complete_todoId123', 'todo', 'complete', 'todoId123'],
      ['todo_start_todo_with_underscore', 'todo', 'start', 'todo_with_underscore'],
    ])('„Ç´„Çπ„Çø„É†ID "%s" „ÅåÊ≠£„Åó„ÅèËß£Êûê„Åï„Çå„Çã', async (customId, expectedAction, expectedType, expectedSessionId) => {
      const interaction = createMockButtonInteraction(customId, 'test-user') as ButtonInteraction;
      
      // handleButtonInteraction„ÅÆÂÜÖÈÉ®„É≠„Ç∏„ÉÉ„ÇØ„ÇíÊ§úË®º„Åô„Çã„Åü„ÇÅ„ÄÅ
      // „Çª„ÉÉ„Ç∑„Éß„É≥„Åæ„Åü„ÅØTODO„Çí‰∫ãÂâç„Å´Ê∫ñÂÇô
      if (expectedAction === 'confirm' || expectedAction === 'classify' || expectedAction === 'ignore') {
        const activeSessions = (handler as any).activeSessions;
        activeSessions.set(expectedSessionId, {
          sessionId: expectedSessionId,
          userId: 'test-user',
          originalMessage: '„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏',
          result: {
            classification: 'TODO',
            confidence: 0.8,
            reason: '„ÉÜ„Çπ„Éà'
          },
          timestamp: new Date()
        });
      } else if (expectedAction === 'todo') {
        // TODOÊìç‰Ωú„ÅÆÂ†¥Âêà„ÄÅTODO„Çí‰ΩúÊàê
        await mockTodoRepo.createTodo({
          userId: 'test-user',
          content: '„ÉÜ„Çπ„ÉàTODO'
        });
      }
      
      // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
      await expect(handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo')).resolves.not.toThrow();
      
      // interaction.reply„Åæ„Åü„ÅØinteraction.update„ÅåÂëº„Å∞„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      const replyCalled = (interaction.reply as jest.Mock).mock.calls.length;
      const updateCalled = (interaction.update as jest.Mock).mock.calls.length;
      expect(replyCalled + updateCalled).toBeGreaterThan(0);
    });

    test('Êñ∞„Åó„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥IDÂΩ¢ÂºèÔºà„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„Å™„ÅóÔºâ„ÅÆÂá¶ÁêÜ', async () => {
      // Êñ∞„Åó„ÅÑÂΩ¢Âºè„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥IDÔºàgenerateSessionId„ÅßÁîüÊàê„Åï„Çå„ÇãÂΩ¢ÂºèÔºâ
      const sessionId = 'q9mcst9l0afppsyh';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏',
        result: {
          classification: 'TODO',
          confidence: 0.8,
          reason: '„ÉÜ„Çπ„Éà'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(
        `confirm_todo_${sessionId}`, 
        'test-user'
      ) as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.update).toHaveBeenCalled();
    });
  });

  describe('„Ç≥„Éû„É≥„Éâ„Éë„Éº„Çπ', () => {
    test('ÂºïÊï∞„Å™„Åó„Åß„É™„Çπ„ÉàË°®Á§∫„Ç≥„Éû„É≥„Éâ„Å®„Åó„Å¶Ëß£Êûê„Åï„Çå„Çã', async () => {
      const message = createMockMessage('!todo', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
    });

    test('ÁÑ°Âäπ„Å™„Ç≥„Éû„É≥„Éâ„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const message = createMockMessage('!todo invalid', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['invalid'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toContain('‚ùå');
      expect(replyCall).toContain('Êú™Áü•„ÅÆ„Ç≥„Éû„É≥„Éâ');
    });

    test('Á©∫„ÅÆÂºïÊï∞ÈÖçÂàó„Åß„É™„Çπ„ÉàË°®Á§∫„Å®„Åó„Å¶Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      const message = createMockMessage('!todo list', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['list'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toHaveProperty('embeds');
    });

    test('ÂºïÊï∞‰∏çË∂≥„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const testCases = [
        { command: ['edit'], expectedError: 'TODO ID„Å®Êñ∞„Åó„ÅÑÂÜÖÂÆπ„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ' },
        { command: ['done'], expectedError: 'TODO ID„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ' },
        { command: ['delete'], expectedError: 'TODO ID„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ' },
        { command: ['search'], expectedError: 'Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }
      ];

      for (const testCase of testCases) {
        const message = createMockMessage(`!todo ${testCase.command.join(' ')}`, 'test-user') as Message;
        (message.reply as jest.Mock).mockClear();
        
        await handler.handleCommand(message, 'test-user', testCase.command, 'Asia/Tokyo');
        
        expect(message.reply).toHaveBeenCalled();
        const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
        expect(replyCall).toContain('‚ùå');
        expect(replyCall).toContain(testCase.expectedError);
      }
    });
  });

  describe('„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ', () => {
    test('ÊúüÈôêÂàá„Çå„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÈÅ©Âàá„Å´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åï„Çå„Çã', async () => {
      const activeSessions = (handler as any).activeSessions;
      const SESSION_TIMEOUT = (handler as any).SESSION_TIMEOUT;
      
      // ÊúüÈôêÂàá„Çå„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰ΩúÊàê
      const expiredSession = {
        sessionId: 'expired-session',
        userId: 'test-user',
        originalMessage: 'ÊúüÈôêÂàá„Çå„É°„ÉÉ„Çª„Éº„Ç∏',
        result: { classification: 'TODO', confidence: 0.8, reason: '„ÉÜ„Çπ„Éà' },
        timestamp: new Date(Date.now() - SESSION_TIMEOUT - 1000) // ÊúüÈôêÂàá„Çå
      };
      
      // ÊúâÂäπ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰ΩúÊàê
      const validSession = {
        sessionId: 'valid-session',
        userId: 'test-user',
        originalMessage: 'ÊúâÂäπ„Å™„É°„ÉÉ„Çª„Éº„Ç∏',
        result: { classification: 'TODO', confidence: 0.8, reason: '„ÉÜ„Çπ„Éà' },
        timestamp: new Date() // ÁèæÂú®ÊôÇÂàª
      };
      
      activeSessions.set('expired-session', expiredSession);
      activeSessions.set('valid-session', validSession);
      
      expect(activeSessions.size).toBe(2);
      
      // „Éó„É©„Ç§„Éô„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ„ÇíÁõ¥Êé•Âëº„Å≥Âá∫„Åó
      await (handler as any).cleanupExpiredSessions();
      
      // ÊúüÈôêÂàá„Çå„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂâäÈô§„Åï„Çå„ÄÅÊúâÂäπ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥„ÅØÊÆã„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(activeSessions.size).toBe(1);
      expect(activeSessions.has('valid-session')).toBe(true);
      expect(activeSessions.has('expired-session')).toBe(false);
    });

    test('destroy „É°„ÇΩ„ÉÉ„Éâ„Åß„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Çø„Ç§„Éû„Éº„ÅåÂÅúÊ≠¢„Åï„Çå„Çã', () => {
      const cleanupInterval = (handler as any).cleanupInterval;
      expect(cleanupInterval).toBeDefined();
      
      // spy„ÇíË®≠ÂÆö
      const clearIntervalSpy = jest.spyOn(global, 'clearInterval');
      
      handler.destroy();
      
      expect(clearIntervalSpy).toHaveBeenCalledWith(cleanupInterval);
      expect((handler as any).cleanupInterval).toBeUndefined();
      
      clearIntervalSpy.mockRestore();
    });
  });

  describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
    test('TODO‰ΩúÊàêÊôÇ„ÅÆ„Ç®„É©„Éº„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      // TODO‰ΩúÊàêÊôÇ„Å´„Ç®„É©„Éº„ÇíÁô∫Áîü„Åï„Åõ„Çã
      jest.spyOn(mockTodoRepo, 'createTodo').mockRejectedValueOnce(new Error('„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº'));
      
      const message = createMockMessage('!todo add Êñ∞„Åó„ÅÑTODO', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['add', 'Êñ∞„Åó„ÅÑTODO'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toContain('‚ùå');
      expect(replyCall).toContain('„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº');
    });

    test('„É°„ÉÉ„Çª„Éº„Ç∏ÂàÜÈ°ûÊôÇ„ÅÆ„Ç®„É©„Éº„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      // ÂàÜÈ°û„Çµ„Éº„Éì„Çπ„Åß„Ç®„É©„Éº„ÇíÁô∫Áîü„Åï„Åõ„Çã
      jest.spyOn(mockClassificationService, 'classifyMessage').mockRejectedValueOnce(new Error('AIÊé•Á∂ö„Ç®„É©„Éº'));
      
      const message = createMockMessage('„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏', 'test-user') as Message;
      
      await handler.handleMessageClassification(message, 'test-user', 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toBe('‚ùå „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂàÜÊûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
    });

    test('„Éú„Çø„É≥„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥ÊôÇ„ÅÆ„Ç®„É©„Éº„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      // TODO„É™„Éù„Ç∏„Éà„É™„Åß„Ç®„É©„Éº„ÇíÁô∫Áîü„Åï„Åõ„Çã
      jest.spyOn(mockTodoRepo, 'getTodoById').mockRejectedValueOnce(new Error('„Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº'));
      
      const interaction = createMockButtonInteraction('todo_complete_test-id', 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toBe('‚ùå „Éú„Çø„É≥Êìç‰Ωú„ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
      expect(replyCall.ephemeral).toBe(true);
    });

    test('„Ç´„Çπ„Çø„É†ID„Å™„Åó„ÅÆ„Éú„Çø„É≥„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const interaction = createMockButtonInteraction('', 'test-user') as ButtonInteraction;
      interaction.customId = undefined as any;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toBe('‚ùå ÁÑ°Âäπ„Å™„Éú„Çø„É≥Êìç‰Ωú„Åß„Åô„ÄÇ');
      expect(replyCall.ephemeral).toBe(true);
    });
  });

  describe('„Éò„É´„Éë„Éº„É°„ÇΩ„ÉÉ„Éâ', () => {
    test('ÂÑ™ÂÖàÂ∫¶„ÅåÊ≠£„Åó„Åè„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åï„Çå„Çã', () => {
      const formatPriority = (handler as any).formatPriority;
      
      expect(formatPriority(1)).toBe('üî¥ È´ò');
      expect(formatPriority(0)).toBe('üü° ÊôÆÈÄö');
      expect(formatPriority(-1)).toBe('üü¢ ‰Ωé');
      expect(formatPriority(999)).toBe('üü° ÊôÆÈÄö'); // default„Ç±„Éº„Çπ„ÅßÊôÆÈÄö„ÇíËøî„Åô
    });
  });

  describe('‰æùÂ≠òÈñ¢‰øÇÊ≥®ÂÖ•', () => {
    test('ActivityLogService„ÅåÊ≥®ÂÖ•„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇÂãï‰Ωú„Åô„Çã', async () => {
      // ActivityLogService„Å™„Åó„Åß„Éè„É≥„Éâ„É©„Éº„Çí‰ΩúÊàê
      const handlerWithoutActivityLog = new TodoCommandHandler(
        mockTodoRepo,
        mockClassificationRepo,
        mockGeminiService as any,
        mockClassificationService as any
        // ActivityLogService„ÇíÊ∏°„Åï„Å™„ÅÑ
      );

      const sessionId = 'test-session-no-activity';
      const activeSessions = (handlerWithoutActivityLog as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '„ÉÜ„Çπ„ÉàÊ¥ªÂãï',
        result: {
          classification: 'ACTIVITY_LOG',
          confidence: 0.8,
          reason: 'Ê¥ªÂãï„É≠„Ç∞'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(
        `confirm_activity_log_${sessionId}`, 
        'test-user'
      ) as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åõ„Åö„Å´Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await expect(
        handlerWithoutActivityLog.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo')
      ).resolves.not.toThrow();
      
      expect(interaction.update).toHaveBeenCalled();
      
      // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
      handlerWithoutActivityLog.destroy();
    });

    test('ActivityLogService„ÅÆ„Ç®„É©„Éº„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
      // recordActivity„Åß„Ç®„É©„Éº„ÇíÁô∫Áîü„Åï„Åõ„Çã
      mockActivityLogService.recordActivity.mockRejectedValueOnce(
        new Error('„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Ç®„É©„Éº')
      );

      const sessionId = 'test-session-error';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: '„Ç®„É©„Éº„ÉÜ„Çπ„Éà',
        result: {
          classification: 'ACTIVITY_LOG',
          confidence: 0.8,
          reason: 'Ê¥ªÂãï„É≠„Ç∞'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(
        `confirm_activity_log_${sessionId}`, 
        'test-user'
      ) as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.update).toHaveBeenCalled();
      const updateCall = (interaction.update as jest.Mock).mock.calls[0][0];
      expect(updateCall.content).toBe('‚ùå Ê¥ªÂãï„É≠„Ç∞„ÅÆ‰ΩúÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
    });

    test('Ê≠£Â∏∏„Å™ActivityLogServiceÊ≥®ÂÖ•„ÅÆÁ¢∫Ë™ç', async () => {
      // ActivityLogService„ÅåÊ≠£„Åó„Åè‰ΩøÁî®„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const sessionId = 'test-session-normal';
      const activeSessions = (handler as any).activeSessions;
      activeSessions.set(sessionId, {
        sessionId,
        userId: 'test-user',
        originalMessage: 'Ê≠£Â∏∏„ÉÜ„Çπ„Éà',
        result: {
          classification: 'ACTIVITY_LOG',
          confidence: 0.9,
          reason: 'Ê¥ªÂãï„É≠„Ç∞„Å®„Åó„Å¶ÊòéÁ¢∫'
        },
        timestamp: new Date()
      });

      const interaction = createMockButtonInteraction(
        `confirm_activity_log_${sessionId}`, 
        'test-user'
      ) as ButtonInteraction;
      interaction.update = jest.fn().mockResolvedValue({});
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      // ActivityLogService„ÅåÂëº„Å∞„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(mockActivityLogService.recordActivity).toHaveBeenCalledTimes(1);
      expect(mockActivityLogService.recordActivity).toHaveBeenCalledWith(
        'test-user',
        'Ê≠£Â∏∏„ÉÜ„Çπ„Éà',
        'Asia/Tokyo'
      );
      
      // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(interaction.update).toHaveBeenCalled();
      const updateCall = (interaction.update as jest.Mock).mock.calls[0][0];
      expect(updateCall.embeds[0].data.title).toBe('üìù Ê¥ªÂãï„É≠„Ç∞‰ΩúÊàêÂÆå‰∫Ü');
    });
  });

  describe('Ë§áÊï∞Ë°å„Éú„Çø„É≥ÁîüÊàê„ÉÜ„Çπ„ÉàÔºàDiscordÂà∂ÈôêÂØæÂøúÔºâ', () => {
    test('5‰ª∂„ÅÆTODO„ÅåË°®Á§∫„Åï„Çå„Åü„Å®„Åç„Å´5„Å§„ÅÆ„Éú„Çø„É≥Ë°å„ÅåÁîüÊàê„Åï„Çå„Çã', async () => {
      // 5‰ª∂„ÅÆTODO„Çí‰ΩúÊàê
      const todos = [];
      for (let i = 1; i <= 5; i++) {
        const todo = await mockTodoRepo.createTodo({
          userId: 'test-user',
          content: `TODO ${i}`,
          priority: i % 3 - 1, // -1, 0, 1„ÅÆÂæ™Áí∞
        });
        todos.push(todo);
      }

      const message = createMockMessage('!todo', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      
      // Embed„ÅåÊ≠£„Åó„ÅèÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall.embeds[0].data.title).toBe('üìã TODO‰∏ÄË¶ß');
      
      // 5„Å§„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºàActionRowÔºâ„ÅåÁîüÊàê„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(replyCall).toHaveProperty('components');
      expect(replyCall.components.length).toBe(5);
    });

    test('10‰ª∂„ÅÆTODO„ÅåË°®Á§∫„Åï„Çå„Åü„Å®„Åç„Å´ÊúÄÂ§ß5‰ª∂„ÅÆ„Éú„Çø„É≥„ÅåÁîüÊàê„Åï„Çå„Çã', async () => {
      // 10‰ª∂„ÅÆTODO„Çí‰ΩúÊàê
      const todos = [];
      for (let i = 1; i <= 10; i++) {
        const todo = await mockTodoRepo.createTodo({
          userId: 'test-user',
          content: `TODO ${i}`,
          priority: 0,
        });
        todos.push(todo);
      }

      const message = createMockMessage('!todo', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      
      // Embed„ÅåÊ≠£„Åó„ÅèÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall.embeds[0].data.title).toBe('üìã TODO‰∏ÄË¶ß');
      
      // DiscordÂà∂Èôê„Å´„Çà„ÇäÊúÄÂ§ß5„Å§„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÁîüÊàê„Åï„Çå„Çã
      expect(replyCall).toHaveProperty('components');
      expect(replyCall.components.length).toBe(5);
    });

    test('6Áï™ÁõÆ‰ª•Èôç„ÅÆTODO„ÅØÁü≠Á∏ÆID„Ç≥„Éû„É≥„Éâ„ÅßÊìç‰ΩúÂèØËÉΩ„Åß„ÅÇ„Çã', async () => {
      // 10‰ª∂„ÅÆTODO„Çí‰ΩúÊàê
      const todos = [];
      for (let i = 1; i <= 10; i++) {
        const todo = await mockTodoRepo.createTodo({
          userId: 'test-user',
          content: `TODO ${i}`,
          priority: 0,
        });
        todos.push(todo);
      }

      // 6Áï™ÁõÆ„ÅÆTODO„ÇíÁü≠Á∏ÆID„ÅßÂÆå‰∫ÜÊìç‰Ωú
      const sixthTodo = todos[5]; // 0-indexed„Å™„ÅÆ„Åß5Áï™ÁõÆ„Åå6Áï™ÁõÆ
      const shortId = sixthTodo.id.substring(0, 8);
      const message = createMockMessage(`!todo done ${shortId}`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['done', shortId], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall).toContain('üéâ');
      expect(replyCall).toContain('ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
      
      // TODO„ÅåÂÆüÈöõ„Å´ÂÆå‰∫ÜÁä∂ÊÖã„Å´„Å™„Å£„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const updatedTodo = await mockTodoRepo.getTodoById(sixthTodo.id);
      expect(updatedTodo?.status).toBe('completed');
    });

    test('TODO„Åå5‰ª∂‰ª•‰∏ã„ÅÆÂ†¥Âêà„ÅØÂæìÊù•ÈÄö„ÇäÂãï‰Ωú„Åô„Çã', async () => {
      // 3‰ª∂„ÅÆTODO„Çí‰ΩúÊàê
      const todos = [];
      for (let i = 1; i <= 3; i++) {
        const todo = await mockTodoRepo.createTodo({
          userId: 'test-user',
          content: `TODO ${i}`,
          priority: 0,
        });
        todos.push(todo);
      }

      const message = createMockMessage('!todo', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      
      // Embed„ÅåÊ≠£„Åó„ÅèÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(replyCall).toHaveProperty('embeds');
      expect(replyCall.embeds[0].data.title).toBe('üìã TODO‰∏ÄË¶ß');
      
      // 3„Å§„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÁîüÊàê„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(replyCall).toHaveProperty('components');
      expect(replyCall.components.length).toBe(3);
    });

    test('„Éú„Çø„É≥„Å´Áï™Âè∑„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      // 3‰ª∂„ÅÆTODO„Çí‰ΩúÊàê
      const todos = [];
      for (let i = 1; i <= 3; i++) {
        const todo = await mockTodoRepo.createTodo({
          userId: 'test-user',
          content: `TODO ${i}`,
          priority: 0,
        });
        todos.push(todo);
      }

      const message = createMockMessage('!todo', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      
      // „Éú„Çø„É≥„Å´Áï™Âè∑„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(replyCall).toHaveProperty('components');
      const components = replyCall.components;
      
      // ÂêÑ„Éú„Çø„É≥Ë°å„ÅÆ„É©„Éô„É´„ÇíÁ¢∫Ë™ç
      components.forEach((component: any, index: number) => {
        const buttons = component.components;
        const expectedNumber = `${index + 1}.`;
        
        // ÂêÑ„Éú„Çø„É≥„ÅÆ„É©„Éô„É´„Å´Áï™Âè∑„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        buttons.forEach((button: any) => {
          expect(button.data.label).toContain(expectedNumber);
        });
      });
    });
  });

  describe('TODO IDË°®Á§∫Ê©üËÉΩ„ÉÜ„Çπ„Éà', () => {
    test('TODO‰∏ÄË¶ß„ÅßTODO ID„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      // Ë§áÊï∞„ÅÆTODO„Çí‰ΩúÊàê
      const todos = [];
      for (let i = 1; i <= 5; i++) {
        const todo = await mockTodoRepo.createTodo({
          userId: 'test-user',
          content: `„ÉÜ„Çπ„ÉàTODO ${i}`,
          priority: 0,
        });
        todos.push(todo);
      }

      const message = createMockMessage('!todo', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      
      // Embed„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç
      expect(replyCall).toHaveProperty('embeds');
      const embed = replyCall.embeds[0];
      expect(embed.data.title).toBe('üìã TODO‰∏ÄË¶ß');
      
      // TODO ID„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const description = embed.data.description;
      expect(description).toBeDefined();
      
      // ÂêÑTODO„ÅÆID„ÅåÁü≠Á∏ÆÂΩ¢„ÅßË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      todos.forEach((todo, index) => {
        const shortId = todo.id.substring(0, 8);
        expect(description).toContain(`\`${shortId}\``);
        expect(description).toContain(`„ÉÜ„Çπ„ÉàTODO ${index + 1}`);
      });
    });

    test('TODO ID„ÅåÊ≠£„Åó„ÅÑ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅßË°®Á§∫„Åï„Çå„Çã', async () => {
      const testTodo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: 'IDË°®Á§∫„ÉÜ„Çπ„Éà',
        priority: 1,
      });

      const message = createMockMessage('!todo', 'test-user') as Message;
      message.reply = jest.fn().mockResolvedValue({});
      
      await handler.handleCommand(message, 'test-user', [], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalled();
      const replyCall = (message.reply as jest.Mock).mock.calls[0][0];
      
      const description = replyCall.embeds[0].data.description;
      const shortId = testTodo.id.substring(0, 8);
      
      // „Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅåÊ≠£„Åó„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç: Áï™Âè∑. `ID` „Ç¢„Ç§„Ç≥„É≥ ÂÑ™ÂÖàÂ∫¶ ÂÜÖÂÆπ
      expect(description).toMatch(new RegExp(`1\\. \`${shortId}\` ‚è≥ üî¥ IDË°®Á§∫„ÉÜ„Çπ„Éà`));
    });
  });

  describe('Áü≠Á∏ÆIDÊ§úÁ¥¢Ê©üËÉΩ„ÉÜ„Çπ„Éà', () => {
    test('Áü≠Á∏ÆID„ÅßTODOÁ∑®ÈõÜ„Åå„Åß„Åç„Çã', async () => {
      const testTodo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: 'Áü≠Á∏ÆIDÁ∑®ÈõÜ„ÉÜ„Çπ„Éà',
        priority: 0,
      });

      const shortId = testTodo.id.substring(0, 8);
      const message = createMockMessage(`!todo edit ${shortId} Á∑®ÈõÜÂæå„ÅÆÂÜÖÂÆπ`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['edit', shortId, 'Á∑®ÈõÜÂæå„ÅÆÂÜÖÂÆπ'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('‚úèÔ∏è TODO„ÄåÁü≠Á∏ÆIDÁ∑®ÈõÜ„ÉÜ„Çπ„Éà„Äç„Çí„ÄåÁ∑®ÈõÜÂæå„ÅÆÂÜÖÂÆπ„Äç„Å´Á∑®ÈõÜ„Åó„Åæ„Åó„ÅüÔºÅ');
      
      const updatedTodo = await mockTodoRepo.getTodoById(testTodo.id);
      expect(updatedTodo?.content).toBe('Á∑®ÈõÜÂæå„ÅÆÂÜÖÂÆπ');
    });

    test('Áü≠Á∏ÆID„ÅßTODOÂÆå‰∫Ü„Åå„Åß„Åç„Çã', async () => {
      const testTodo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: 'Áü≠Á∏ÆIDÂÆå‰∫Ü„ÉÜ„Çπ„Éà',
        priority: 0,
      });

      const shortId = testTodo.id.substring(0, 8);
      const message = createMockMessage(`!todo done ${shortId}`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['done', shortId], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('üéâ TODO„ÄåÁü≠Á∏ÆIDÂÆå‰∫Ü„ÉÜ„Çπ„Éà„Äç„ÇíÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
      
      const updatedTodo = await mockTodoRepo.getTodoById(testTodo.id);
      expect(updatedTodo?.status).toBe('completed');
    });

    test('Áü≠Á∏ÆID„ÅßTODOÂâäÈô§„Åå„Åß„Åç„Çã', async () => {
      const testTodo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: 'Áü≠Á∏ÆIDÂâäÈô§„ÉÜ„Çπ„Éà',
        priority: 0,
      });

      const shortId = testTodo.id.substring(0, 8);
      const message = createMockMessage(`!todo delete ${shortId}`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['delete', shortId], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('üóëÔ∏è TODO„ÄåÁü≠Á∏ÆIDÂâäÈô§„ÉÜ„Çπ„Éà„Äç„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ');
      
      const deletedTodo = await mockTodoRepo.getTodoById(testTodo.id);
      expect(deletedTodo).toBeNull();
    });

    test('Áü≠Á∏ÆID„ÅÆ„Éú„Çø„É≥Êìç‰Ωú„Åå„Åß„Åç„Çã', async () => {
      const testTodo = await mockTodoRepo.createTodo({
        userId: 'test-user',
        content: 'Áü≠Á∏ÆID„Éú„Çø„É≥„ÉÜ„Çπ„Éà',
        priority: 0,
      });

      const shortId = testTodo.id.substring(0, 8);
      const interaction = createMockButtonInteraction(`todo_complete_${shortId}`, 'test-user') as ButtonInteraction;
      
      await handler.handleButtonInteraction(interaction, 'test-user', 'Asia/Tokyo');
      
      expect(interaction.reply).toHaveBeenCalled();
      const replyCall = (interaction.reply as jest.Mock).mock.calls[0][0];
      expect(replyCall.content).toContain('üéâ');
      expect(replyCall.content).toContain('ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
      
      const updatedTodo = await mockTodoRepo.getTodoById(testTodo.id);
      expect(updatedTodo?.status).toBe('completed');
    });

    test('Â≠òÂú®„Åó„Å™„ÅÑÁü≠Á∏ÆID„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
      const message = createMockMessage('!todo edit abc12345 Êñ∞„Åó„ÅÑÂÜÖÂÆπ', 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['edit', 'abc12345', 'Êñ∞„Åó„ÅÑÂÜÖÂÆπ'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('‚ùå ÊåáÂÆö„Åï„Çå„ÅüTODO„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
    });

    test('‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆÁü≠Á∏ÆID„Åß„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Çã', async () => {
      const otherUserTodo = await mockTodoRepo.createTodo({
        userId: 'other-user',
        content: '‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆTODO',
        priority: 0,
      });

      const shortId = otherUserTodo.id.substring(0, 8);
      const message = createMockMessage(`!todo edit ${shortId} ÊÇ™ÊÑè„ÅÆ„ÅÇ„ÇãÁ∑®ÈõÜ`, 'test-user') as Message;
      
      await handler.handleCommand(message, 'test-user', ['edit', shortId, 'ÊÇ™ÊÑè„ÅÆ„ÅÇ„ÇãÁ∑®ÈõÜ'], 'Asia/Tokyo');
      
      expect(message.reply).toHaveBeenCalledWith('‚ùå ÊåáÂÆö„Åï„Çå„ÅüTODO„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
    });
  });
});  