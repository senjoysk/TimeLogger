<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÊôÇÂàª„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ - TimeLogger ÁÆ°ÁêÜÁîªÈù¢</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <style>
        /* „Ç´„Çπ„Çø„É†„Çπ„Çø„Ç§„É´ */
        .timezone-card {
            transition: all 0.3s ease;
        }
        .timezone-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        .summary-time {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }
        .regular-time {
            background: #f3f4f6;
            color: #374151;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Header -->
    <%- include('partials/header') %>

    <!-- Navigation -->
    <% let localCurrentPage = 'time-simulation'; %>
    <%- include('partials/navigation') %>

    <!-- „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" x-data="timeSimulation()">
        
        <!-- ÁèæÂú®„ÅÆË®≠ÂÆöÊôÇÂàªË°®Á§∫ -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">üìÖ ÁèæÂú®„ÅÆË®≠ÂÆöÊôÇÂàª</h2>
            <div class="bg-gray-50 rounded-lg p-4" x-show="currentTime">
                <div class="grid grid-cols-2 md:grid-cols-5 gap-4 text-center">
                    <div>
                        <div class="text-2xl font-bold text-blue-600" x-text="currentTime.year"></div>
                        <div class="text-sm text-gray-600">Âπ¥</div>
                    </div>
                    <div>
                        <div class="text-2xl font-bold text-blue-600" x-text="currentTime.month"></div>
                        <div class="text-sm text-gray-600">Êúà</div>
                    </div>
                    <div>
                        <div class="text-2xl font-bold text-blue-600" x-text="currentTime.day"></div>
                        <div class="text-sm text-gray-600">Êó•</div>
                    </div>
                    <div>
                        <div class="text-2xl font-bold text-blue-600" x-text="formatTime(currentTime.hour, currentTime.minute)"></div>
                        <div class="text-sm text-gray-600">ÊôÇÂàª</div>
                    </div>
                    <div>
                        <div class="text-xl font-bold text-purple-600" x-text="currentTime.timezone"></div>
                        <div class="text-sm text-gray-600">„Çø„Ç§„É†„Çæ„Éº„É≥</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ÊôÇÂàªË®≠ÂÆö„Éï„Ç©„Éº„É† -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">‚è∞ ÊôÇÂàªË®≠ÂÆö</h2>
            
            <form @submit.prevent="setTime()" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Êó•‰ªòË®≠ÂÆö -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Êó•‰ªò</label>
                        <div class="grid grid-cols-3 gap-2">
                            <input type="number" x-model="timeForm.year" placeholder="Âπ¥" 
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <input type="number" x-model="timeForm.month" placeholder="Êúà" min="1" max="12"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <input type="number" x-model="timeForm.day" placeholder="Êó•" min="1" max="31"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                    </div>

                    <!-- ÊôÇÂàªË®≠ÂÆö -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">ÊôÇÂàª</label>
                        <div class="grid grid-cols-2 gap-2">
                            <input type="number" x-model="timeForm.hour" placeholder="ÊôÇ" min="0" max="23"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <input type="number" x-model="timeForm.minute" placeholder="ÂàÜ" min="0" max="59"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                    </div>

                    <!-- „Çø„Ç§„É†„Çæ„Éº„É≥Ë®≠ÂÆö -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">„Çø„Ç§„É†„Çæ„Éº„É≥</label>
                        <select x-model="timeForm.timezone"
                                class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <template x-for="timezone in timezones" :key="timezone">
                                <option :value="timezone" x-text="timezone"></option>
                            </template>
                        </select>
                    </div>
                </div>

                <div class="flex justify-between items-center">
                    <button type="submit" 
                            class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                            :disabled="isLoading">
                        <span x-show="!isLoading">ÊôÇÂàª„ÇíË®≠ÂÆö</span>
                        <span x-show="isLoading">Ë®≠ÂÆö‰∏≠...</span>
                    </button>
                    
                    <button type="button" @click="resetTime()"
                            class="bg-gray-600 text-white px-6 py-2 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
                        ÂÆüÊôÇÂàª„Å´Êàª„Åô
                    </button>
                </div>
            </form>
        </div>

        <!-- „Éó„É™„Çª„ÉÉ„ÉàÊôÇÂàª -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">üéØ „Éó„É™„Çª„ÉÉ„ÉàÊôÇÂàª</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <template x-for="preset in presets" :key="preset.name">
                    <div class="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-colors"
                         @click="applyPreset(preset)">
                        <div class="font-medium text-gray-900" x-text="preset.name"></div>
                        <div class="text-sm text-gray-600" x-text="preset.description"></div>
                        <div class="mt-2">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                <span x-text="formatTime(preset.hour, preset.minute)"></span>
                            </span>
                            <span class="ml-2 text-xs text-gray-500" x-text="preset.defaultTimezone"></span>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- „Çø„Ç§„É†„Çæ„Éº„É≥Ë°®Á§∫ -->
        <div class="bg-white rounded-lg shadow-md p-6" x-show="timezoneDisplays.length > 0">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">üåè ÂêÑ„Çø„Ç§„É†„Çæ„Éº„É≥„Åß„ÅÆÊôÇÂàª</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <template x-for="display in timezoneDisplays" :key="display.timezone">
                    <div class="timezone-card rounded-lg p-4 border"
                         :class="display.isSummaryTime ? 'summary-time' : 'regular-time'">
                        <div class="font-medium" x-text="display.displayName"></div>
                        <div class="text-sm opacity-75" x-text="display.timezone"></div>
                        <div class="mt-2">
                            <div class="text-lg font-mono" x-text="display.localTime"></div>
                            <div class="text-xs mt-1" x-show="display.isSummaryTime">
                                üì¢ „Çµ„Éû„É™„ÉºÈÄÅ‰ø°ÊôÇÂàª
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- „Ç¢„É©„Éº„ÉàË°®Á§∫ -->
        <div x-show="alert.show" 
             class="fixed bottom-4 right-4 max-w-sm bg-white rounded-lg shadow-lg p-4 border-l-4"
             :class="alert.type === 'success' ? 'border-green-400' : 'border-red-400'"
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform translate-y-2"
             x-transition:enter-end="opacity-100 transform translate-y-0"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform translate-y-0"
             x-transition:leave-end="opacity-0 transform translate-y-2">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <span x-show="alert.type === 'success'" class="text-green-400">‚úÖ</span>
                    <span x-show="alert.type === 'error'" class="text-red-400">‚ùå</span>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-900" x-text="alert.message"></p>
                </div>
                <div class="ml-auto pl-3">
                    <button @click="alert.show = false" class="text-gray-400 hover:text-gray-600">
                        <span class="sr-only">Close</span>
                        √ó
                    </button>
                </div>
            </div>
        </div>
    </main>

    <script>
        // „Éô„Éº„Çπ„Éë„Çπ„ÇíÂèñÂæó
        const basePath = '<%= basePath %>' || '';
        
        function timeSimulation() {
            return {
                currentTime: null,
                timezones: [],
                presets: [],
                timezoneDisplays: [],
                isLoading: false,
                timeForm: {
                    year: new Date().getFullYear(),
                    month: new Date().getMonth() + 1,
                    day: new Date().getDate(),
                    hour: 18,
                    minute: 30,
                    timezone: 'Asia/Tokyo'
                },
                alert: {
                    show: false,
                    type: 'success',
                    message: ''
                },

                async init() {
                    await this.loadInitialData();
                    await this.loadCurrentTime();
                },

                async loadInitialData() {
                    try {
                        // „Çø„Ç§„É†„Çæ„Éº„É≥‰∏ÄË¶ß„ÇíÂèñÂæó
                        const timezonesResponse = await fetch(`${basePath}/tools/api/time-simulation/timezones`);
                        const timezonesData = await timezonesResponse.json();
                        if (timezonesData.success) {
                            this.timezones = timezonesData.timezones;
                        }

                        // „Éó„É™„Çª„ÉÉ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
                        const presetsResponse = await fetch(`${basePath}/tools/api/time-simulation/presets`);
                        const presetsData = await presetsResponse.json();
                        if (presetsData.success) {
                            this.presets = presetsData.presets;
                        }
                    } catch (error) {
                        this.showAlert('error', '„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                    }
                },

                async loadCurrentTime() {
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/current`);
                        const data = await response.json();
                        if (data.success) {
                            this.currentTime = data.currentTime;
                            this.timezoneDisplays = data.timezoneDisplays || [];
                        }
                    } catch (error) {
                        this.showAlert('error', 'ÁèæÂú®ÊôÇÂàª„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                    }
                },

                async setTime() {
                    if (this.isLoading) return;
                    
                    this.isLoading = true;
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/set`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(this.timeForm)
                        });
                        
                        const data = await response.json();
                        if (data.success) {
                            this.timezoneDisplays = data.timezoneDisplays || [];
                            await this.loadCurrentTime();
                            this.showAlert('success', 'ÊôÇÂàª„ÅåË®≠ÂÆö„Åï„Çå„Åæ„Åó„Åü');
                        } else {
                            this.showAlert('error', data.error || 'ÊôÇÂàª„ÅÆË®≠ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                        }
                    } catch (error) {
                        this.showAlert('error', '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
                    } finally {
                        this.isLoading = false;
                    }
                },

                async applyPreset(preset) {
                    if (this.isLoading) return;
                    
                    this.isLoading = true;
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/preset`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                presetName: preset.name,
                                timezone: preset.defaultTimezone
                            })
                        });
                        
                        const data = await response.json();
                        if (data.success) {
                            this.timezoneDisplays = data.timezoneDisplays || [];
                            await this.loadCurrentTime();
                            this.showAlert('success', `„Éó„É™„Çª„ÉÉ„Éà„Äå${preset.name}„Äç„ÅåÈÅ©Áî®„Åï„Çå„Åæ„Åó„Åü`);
                            
                            // „Éï„Ç©„Éº„É†„ÇÇÊõ¥Êñ∞
                            this.timeForm.hour = preset.hour;
                            this.timeForm.minute = preset.minute;
                            this.timeForm.timezone = preset.defaultTimezone;
                        } else {
                            this.showAlert('error', data.error || '„Éó„É™„Çª„ÉÉ„Éà„ÅÆÈÅ©Áî®„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                        }
                    } catch (error) {
                        this.showAlert('error', '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
                    } finally {
                        this.isLoading = false;
                    }
                },

                async resetTime() {
                    if (this.isLoading) return;
                    
                    this.isLoading = true;
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/reset`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        const data = await response.json();
                        if (data.success) {
                            await this.loadCurrentTime();
                            this.showAlert('success', 'ÂÆüÊôÇÂàª„Å´Êàª„Åó„Åæ„Åó„Åü');
                        } else {
                            this.showAlert('error', data.error || '„É™„Çª„ÉÉ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                        }
                    } catch (error) {
                        this.showAlert('error', '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
                    } finally {
                        this.isLoading = false;
                    }
                },

                formatTime(hour, minute) {
                    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                },

                showAlert(type, message) {
                    this.alert = {
                        show: true,
                        type: type,
                        message: message
                    };
                    
                    // 3ÁßíÂæå„Å´Ëá™Âãï„ÅßÈñâ„Åò„Çã
                    setTimeout(() => {
                        this.alert.show = false;
                    }, 3000);
                }
            }
        }
    </script>
</body>
</html>