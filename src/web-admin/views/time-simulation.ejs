<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>時刻シミュレーション - TimeLogger 管理画面</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <style>
        /* カスタムスタイル */
        .timezone-card {
            transition: all 0.3s ease;
        }
        .timezone-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        .summary-time {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }
        .regular-time {
            background: #f3f4f6;
            color: #374151;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Header -->
    <%- include('partials/header') %>

    <!-- Navigation -->
    <% let localCurrentPage = 'time-simulation'; %>
    <%- include('partials/navigation') %>

    <!-- メインコンテンツ -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" x-data="timeSimulation()">
        
        <!-- 機能説明セクション -->
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-8">
            <h2 class="text-lg font-semibold text-yellow-800 mb-3">
                ⚠️ 時刻シミュレーション機能について
            </h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h3 class="font-medium text-yellow-800 mb-2">✅ テストできること:</h3>
                    <ul class="list-disc list-inside text-yellow-700 space-y-1">
                        <li>Discord !timezone コマンドでの時刻表示確認</li>
                        <li>タイムゾーン計算の正確性検証</li>
                        <li>時刻関連UI表示の確認</li>
                    </ul>
                </div>
                
                <div>
                    <h3 class="font-medium text-yellow-800 mb-2">❌ テストできないこと:</h3>
                    <ul class="list-disc list-inside text-yellow-700 space-y-1">
                        <li>30分リマインダーの自動送信</li>
                        <li>日次サマリーの自動送信</li>
                        <li>cronジョブとの統合動作</li>
                    </ul>
                </div>
            </div>
            
            <div class="mt-4 bg-yellow-100 rounded p-3">
                <p class="text-sm text-yellow-800">
                    <strong>理由:</strong> リマインダーとサマリーはcronジョブで実時刻に基づいて動作するため、
                    シミュレーション時刻では自動発火しません。
                </p>
            </div>
        </div>

        <!-- 手動テスト機能案内 -->
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
            <h2 class="text-lg font-semibold text-blue-800 mb-3">
                🔧 手動テスト機能
            </h2>
            
            <p class="text-blue-700 mb-4">
                cronジョブ機能（リマインダー・サマリー）のテストは、以下の専用機能をご利用ください：
            </p>
            
            <div class="space-y-3">
                <div class="flex items-center justify-between bg-white rounded p-3 border">
                    <div>
                        <h4 class="font-medium text-gray-900">📊 サマリー送信テスト</h4>
                        <p class="text-sm text-gray-600">ドライラン・実際送信・プレビュー機能</p>
                    </div>
                    <a href="<%= basePath %>/tools/summary-test" 
                       class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                        テストページへ
                    </a>
                </div>
                
                <div class="flex items-center justify-between bg-white rounded p-3 border">
                    <div>
                        <h4 class="font-medium text-gray-900">🔔 30分リマインダーテスト</h4>
                        <p class="text-sm text-gray-600">活動促し通知の手動送信テスト</p>
                    </div>
                    <button onclick="document.getElementById('reminder-test').scrollIntoView()" 
                            class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                        下記セクションへ
                    </button>
                </div>
            </div>
        </div>
        
        <!-- 現在の設定時刻表示 -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">📅 現在の設定時刻</h2>
            <div class="bg-gray-50 rounded-lg p-4" x-show="currentTime">
                <div class="grid grid-cols-2 md:grid-cols-6 gap-4 text-center">
                    <div>
                        <div class="text-2xl font-bold text-blue-600" x-text="currentTime.year"></div>
                        <div class="text-sm text-gray-600">年</div>
                    </div>
                    <div>
                        <div class="text-2xl font-bold text-blue-600" x-text="currentTime.month"></div>
                        <div class="text-sm text-gray-600">月</div>
                    </div>
                    <div>
                        <div class="text-2xl font-bold text-blue-600" x-text="currentTime.day"></div>
                        <div class="text-sm text-gray-600">日</div>
                    </div>
                    <div>
                        <div class="text-lg font-bold text-blue-600" x-text="currentTime.hour?.toString().padStart(2, '0')"></div>
                        <div class="text-sm text-gray-600">時</div>
                    </div>
                    <div>
                        <div class="text-lg font-bold text-blue-600" x-text="currentTime.minute?.toString().padStart(2, '0')"></div>
                        <div class="text-sm text-gray-600">分</div>
                    </div>
                    <div>
                        <div class="text-lg font-bold text-green-600" x-text="currentTime.second?.toString().padStart(2, '0')"></div>
                        <div class="text-sm text-gray-600">秒</div>
                    </div>
                </div>
                <div class="mt-4 text-center">
                    <div class="text-xl font-bold text-purple-600" x-text="currentTime.timezone"></div>
                    <div class="text-sm text-gray-600">タイムゾーン</div>
                </div>
            </div>
        </div>

        <!-- 時刻設定フォーム -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">⏰ 時刻設定</h2>
            
            <form @submit.prevent="setTime()" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- 日付設定 -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">日付</label>
                        <div class="grid grid-cols-3 gap-2">
                            <input type="number" x-model="timeForm.year" placeholder="年" 
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <input type="number" x-model="timeForm.month" placeholder="月" min="1" max="12"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <input type="number" x-model="timeForm.day" placeholder="日" min="1" max="31"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                    </div>

                    <!-- 時刻設定 -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">時刻</label>
                        <div class="grid grid-cols-3 gap-2">
                            <input type="number" x-model="timeForm.hour" placeholder="時" min="0" max="23"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <input type="number" x-model="timeForm.minute" placeholder="分" min="0" max="59"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <input type="number" x-model="timeForm.second" placeholder="秒" min="0" max="59"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                    </div>

                    <!-- タイムゾーン設定 -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">タイムゾーン</label>
                        <select x-model="timeForm.timezone"
                                class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <template x-for="timezone in timezones" :key="timezone">
                                <option :value="timezone" x-text="timezone"></option>
                            </template>
                        </select>
                    </div>
                </div>

                <div class="flex justify-between items-center">
                    <button type="submit" 
                            class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                            :disabled="isLoading">
                        <span x-show="!isLoading">時刻を設定</span>
                        <span x-show="isLoading">設定中...</span>
                    </button>
                    
                    <button type="button" @click="resetTime()"
                            class="bg-gray-600 text-white px-6 py-2 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
                        実時刻に戻す
                    </button>
                </div>
            </form>
        </div>

        <!-- プリセット時刻 -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">🎯 プリセット時刻</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <template x-for="preset in presets" :key="preset.name">
                    <div class="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-colors"
                         @click="applyPreset(preset)">
                        <div class="font-medium text-gray-900" x-text="preset.name"></div>
                        <div class="text-sm text-gray-600" x-text="preset.description"></div>
                        <div class="mt-2">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                <span x-text="formatTime(preset.hour, preset.minute)"></span>
                            </span>
                            <span class="ml-2 text-xs text-gray-500" x-text="preset.defaultTimezone"></span>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- タイムゾーン表示 -->
        <div class="bg-white rounded-lg shadow-md p-6" x-show="timezoneDisplays.length > 0">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">🌏 各タイムゾーンでの時刻</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <template x-for="display in timezoneDisplays" :key="display.timezone">
                    <div class="timezone-card rounded-lg p-4 border"
                         :class="display.isSummaryTime ? 'summary-time' : 'regular-time'">
                        <div class="font-medium" x-text="display.displayName"></div>
                        <div class="text-sm opacity-75" x-text="display.timezone"></div>
                        <div class="mt-2">
                            <div class="text-lg font-mono" x-text="display.localTime"></div>
                            <div class="text-xs mt-1" x-show="display.isSummaryTime">
                                📢 サマリー送信時刻
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- 30分リマインダー手動テスト -->
        <div id="reminder-test" class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">
                🔔 30分リマインダー手動テスト
            </h2>
            
            <div class="space-y-6">
                <!-- 説明 -->
                <div class="bg-green-50 border border-green-200 rounded p-4">
                    <p class="text-sm text-green-800">
                        <strong>説明:</strong> 
                        活動促し通知設定が有効なユーザーに、手動でリマインダーを送信します。
                        実際のcron動作とは独立して実行されます。
                    </p>
                </div>

                <!-- 送信設定 -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">送信対象</label>
                        <select x-model="reminderForm.targetUser" 
                                class="w-full border border-gray-300 rounded-md p-2 focus:border-blue-500 focus:ring-blue-500">
                            <option value="all">全対象ユーザー（設定有効者のみ）</option>
                            <template x-for="user in reminderUsers" :key="user.userId">
                                <option :value="user.userId" x-text="`${user.userId} (${user.startHour}:${user.startMinute.toString().padStart(2,'0')}-${user.endHour}:${user.endMinute.toString().padStart(2,'0')})`"></option>
                            </template>
                        </select>
                    </div>

                    <div class="flex items-end">
                        <div class="flex space-x-2">
                            <button @click="sendReminder()" 
                                    :disabled="isReminderLoading"
                                    class="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed">
                                <span x-show="!isReminderLoading">🔔 リマインダー送信</span>
                                <span x-show="isReminderLoading">送信中...</span>
                            </button>
                            
                            <button @click="loadReminderUsers()" 
                                    class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700">
                                対象ユーザー更新
                            </button>
                        </div>
                    </div>
                </div>

                <!-- 対象ユーザー一覧 -->
                <div x-show="reminderUsers.length > 0" class="bg-gray-50 rounded-lg p-4">
                    <h4 class="font-medium text-gray-900 mb-3">📋 リマインダー設定有効ユーザー</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                        <template x-for="user in reminderUsers" :key="user.userId">
                            <div class="bg-white rounded p-3 border border-gray-200">
                                <div class="font-medium text-sm" x-text="user.userId"></div>
                                <div class="text-xs text-gray-600">
                                    <span x-text="`時間帯: ${user.startHour}:${user.startMinute.toString().padStart(2,'0')}-${user.endHour}:${user.endMinute.toString().padStart(2,'0')}`"></span>
                                </div>
                                <div class="text-xs text-gray-500">
                                    <span x-text="`作成: ${new Date(user.createdAt).toLocaleDateString()}`"></span>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>

                <!-- 実行結果 -->
                <div x-show="reminderResult" class="bg-gray-50 rounded-lg p-4">
                    <h4 class="font-medium text-gray-900 mb-3">📊 実行結果</h4>
                    <div x-show="reminderResult && reminderResult.success" class="space-y-2">
                        <div class="text-sm">
                            <span class="font-medium">実行時刻:</span>
                            <span x-text="reminderResult.timestamp"></span>
                        </div>
                        <div class="text-sm">
                            <span class="font-medium">送信結果:</span>
                            <span x-text="reminderResult.message"></span>
                        </div>
                        <div x-show="reminderResult.results && reminderResult.results.length > 0" class="mt-3">
                            <div class="space-y-2">
                                <template x-for="result in reminderResult.results" :key="result.userId">
                                    <div class="flex items-center justify-between bg-white rounded p-2 border">
                                        <div class="flex items-center space-x-2">
                                            <span class="text-sm font-medium" x-text="result.userId"></span>
                                            <span class="text-xs text-gray-500" x-text="result.timezone"></span>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            <span class="text-xs px-2 py-1 rounded-full"
                                                  :class="result.status === 'sent' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'"
                                                  x-text="result.status === 'sent' ? '送信済み' : 'エラー'"></span>
                                        </div>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </div>
                    <div x-show="reminderResult && !reminderResult.success" class="text-red-600 text-sm">
                        <strong>エラー:</strong> <span x-text="reminderResult.error"></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- アラート表示 -->
        <div x-show="alert.show" 
             class="fixed bottom-4 right-4 max-w-sm bg-white rounded-lg shadow-lg p-4 border-l-4"
             :class="alert.type === 'success' ? 'border-green-400' : 'border-red-400'"
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform translate-y-2"
             x-transition:enter-end="opacity-100 transform translate-y-0"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform translate-y-0"
             x-transition:leave-end="opacity-0 transform translate-y-2">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <span x-show="alert.type === 'success'" class="text-green-400">✅</span>
                    <span x-show="alert.type === 'error'" class="text-red-400">❌</span>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-900" x-text="alert.message"></p>
                </div>
                <div class="ml-auto pl-3">
                    <button @click="alert.show = false" class="text-gray-400 hover:text-gray-600">
                        <span class="sr-only">Close</span>
                        ×
                    </button>
                </div>
            </div>
        </div>
    </main>

    <script>
        // ベースパスを取得
        const basePath = '<%= basePath %>' || '';
        
        function timeSimulation() {
            return {
                currentTime: null,
                timezones: [],
                presets: [],
                timezoneDisplays: [],
                isLoading: false,
                timeForm: {
                    year: new Date().getFullYear(),
                    month: new Date().getMonth() + 1,
                    day: new Date().getDate(),
                    hour: 18,
                    minute: 30,
                    second: 0,
                    timezone: 'Asia/Tokyo'
                },
                alert: {
                    show: false,
                    type: 'success',
                    message: ''
                },
                // 手動リマインダー機能
                reminderUsers: [],
                isReminderLoading: false,
                reminderForm: {
                    targetUser: 'all'
                },
                reminderResult: null,

                async init() {
                    await this.loadInitialData();
                    await this.loadCurrentTime();
                    await this.loadReminderUsers();
                },

                async loadInitialData() {
                    try {
                        // タイムゾーン一覧を取得
                        const timezonesResponse = await fetch(`${basePath}/tools/api/time-simulation/timezones`);
                        const timezonesData = await timezonesResponse.json();
                        if (timezonesData.success) {
                            this.timezones = timezonesData.timezones;
                        }

                        // プリセット一覧を取得
                        const presetsResponse = await fetch(`${basePath}/tools/api/time-simulation/presets`);
                        const presetsData = await presetsResponse.json();
                        if (presetsData.success) {
                            this.presets = presetsData.presets;
                        }
                    } catch (error) {
                        this.showAlert('error', 'データの読み込みに失敗しました');
                    }
                },

                async loadCurrentTime() {
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/current`);
                        const data = await response.json();
                        if (data.success) {
                            this.currentTime = data.currentTime;
                            this.timezoneDisplays = data.timezoneDisplays || [];
                        }
                    } catch (error) {
                        this.showAlert('error', '現在時刻の取得に失敗しました');
                    }
                },

                async setTime() {
                    if (this.isLoading) return;
                    
                    this.isLoading = true;
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/set`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(this.timeForm)
                        });
                        
                        const data = await response.json();
                        if (data.success) {
                            this.timezoneDisplays = data.timezoneDisplays || [];
                            await this.loadCurrentTime();
                            this.showAlert('success', '時刻が設定されました');
                        } else {
                            this.showAlert('error', data.error || '時刻の設定に失敗しました');
                        }
                    } catch (error) {
                        this.showAlert('error', 'サーバーエラーが発生しました');
                    } finally {
                        this.isLoading = false;
                    }
                },

                async applyPreset(preset) {
                    if (this.isLoading) return;
                    
                    this.isLoading = true;
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/preset`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                presetName: preset.name,
                                timezone: preset.defaultTimezone
                            })
                        });
                        
                        const data = await response.json();
                        if (data.success) {
                            this.timezoneDisplays = data.timezoneDisplays || [];
                            await this.loadCurrentTime();
                            this.showAlert('success', `プリセット「${preset.name}」が適用されました`);
                            
                            // フォームも更新
                            this.timeForm.hour = preset.hour;
                            this.timeForm.minute = preset.minute;
                            this.timeForm.second = 0;
                            this.timeForm.timezone = preset.defaultTimezone;
                        } else {
                            this.showAlert('error', data.error || 'プリセットの適用に失敗しました');
                        }
                    } catch (error) {
                        this.showAlert('error', 'サーバーエラーが発生しました');
                    } finally {
                        this.isLoading = false;
                    }
                },

                async resetTime() {
                    if (this.isLoading) return;
                    
                    this.isLoading = true;
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/reset`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        const data = await response.json();
                        if (data.success) {
                            await this.loadCurrentTime();
                            this.showAlert('success', '実時刻に戻しました');
                        } else {
                            this.showAlert('error', data.error || 'リセットに失敗しました');
                        }
                    } catch (error) {
                        this.showAlert('error', 'サーバーエラーが発生しました');
                    } finally {
                        this.isLoading = false;
                    }
                },

                formatTime(hour, minute, second) {
                    if (second !== undefined) {
                        return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:${second.toString().padStart(2, '0')}`;
                    }
                    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                },

                // 手動リマインダー機能のメソッド
                async loadReminderUsers() {
                    try {
                        const response = await fetch(`${basePath}/tools/api/time-simulation/reminder-test/users`);
                        const data = await response.json();
                        if (data.success) {
                            this.reminderUsers = data.users;
                        } else {
                            console.warn('リマインダーユーザーの取得に失敗:', data.error);
                        }
                    } catch (error) {
                        console.warn('リマインダーユーザーの取得に失敗:', error);
                    }
                },

                async sendReminder() {
                    if (this.isReminderLoading) return;
                    
                    this.isReminderLoading = true;
                    this.reminderResult = null;
                    
                    try {
                        const requestData = {
                            userId: this.reminderForm.targetUser === 'all' ? undefined : this.reminderForm.targetUser
                        };

                        const response = await fetch(`${basePath}/tools/api/time-simulation/reminder-test/send`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(requestData)
                        });
                        
                        const data = await response.json();
                        this.reminderResult = {
                            ...data,
                            timestamp: new Date().toLocaleString()
                        };
                        
                        if (data.success) {
                            this.showAlert('success', 'リマインダーの送信が完了しました');
                        } else {
                            this.showAlert('error', data.error || 'リマインダーの送信に失敗しました');
                        }
                    } catch (error) {
                        this.reminderResult = {
                            success: false,
                            error: 'サーバーエラーが発生しました',
                            timestamp: new Date().toLocaleString()
                        };
                        this.showAlert('error', 'サーバーエラーが発生しました');
                    } finally {
                        this.isReminderLoading = false;
                    }
                },

                showAlert(type, message) {
                    this.alert = {
                        show: true,
                        type: type,
                        message: message
                    };
                    
                    // 3秒後に自動で閉じる
                    setTimeout(() => {
                        this.alert.show = false;
                    }, 3000);
                }
            }
        }
    </script>
</body>
</html>