#!/bin/bash

# Git post-checkout フック
# worktree作成時に自動実行され、環境変数ファイルをコピーし、開発環境をセットアップ

# フックパラメータ
OLD_HEAD="$1"
NEW_HEAD="$2" 
BRANCH_CHECKOUT="$3"

# 色付きログ用の設定
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# ログ関数
log_info() {
    echo -e "${BLUE}[GIT-HOOK]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[GIT-HOOK]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[GIT-HOOK]${NC} $1"
}

log_error() {
    echo -e "${RED}[GIT-HOOK]${NC} $1"
}

# 設定ファイルの読み込み
HOOK_CONFIG_FILE=".githooks/config"
if [ -f "$HOOK_CONFIG_FILE" ]; then
    source "$HOOK_CONFIG_FILE"
fi

# デフォルト設定
AUTO_ENV_COPY="${AUTO_ENV_COPY:-true}"
AUTO_NPM_INSTALL="${AUTO_NPM_INSTALL:-true}"
AUTO_TEMPLATE_VARS="${AUTO_TEMPLATE_VARS:-true}"
VERBOSE_LOGGING="${VERBOSE_LOGGING:-false}"

# 詳細ログが有効な場合のみ表示
log_debug() {
    if [ "$VERBOSE_LOGGING" = "true" ]; then
        echo -e "${BLUE}[DEBUG]${NC} $1"
    fi
}

# worktree作成かどうかを判定
is_worktree_creation() {
    # 現在のディレクトリがメインリポジトリと異なるかチェック
    local main_repo_path=$(git rev-parse --show-toplevel 2>/dev/null)
    local current_path=$(pwd)
    
    # worktreeの場合、.gitファイルが存在する
    if [ -f ".git" ]; then
        log_debug "worktree検出: .gitファイルが存在"
        return 0
    fi
    
    return 1
}

# メインリポジトリのパスを取得
get_main_repo_path() {
    # .git ファイルから実際のgitディレクトリを取得
    if [ -f ".git" ]; then
        local git_dir=$(cat .git | sed 's/gitdir: //')
        # worktreeの場合、.git/worktrees/xxx から ../../.. で親ディレクトリに戻る
        echo "$(dirname "$(dirname "$(dirname "$git_dir")")")"
    else
        # メインリポジトリの場合
        git rev-parse --show-toplevel
    fi
}

# 環境変数ファイルのリスト
ENV_FILES=(".env" ".env.local" ".env.development" ".env.production" ".env.test" ".env.staging" ".env.example")

# 環境変数ファイルをコピー
copy_env_files() {
    local main_repo_path="$1"
    local current_branch=$(git branch --show-current)
    
    log_info "環境変数ファイルをコピー中..."
    log_debug "メインリポジトリ: $main_repo_path"
    log_debug "現在のブランチ: $current_branch"
    
    local copied_files=()
    
    for env_file in "${ENV_FILES[@]}"; do
        local source_file="$main_repo_path/$env_file"
        local dest_file="./$env_file"
        
        if [ -f "$source_file" ]; then
            # ファイルが既に存在し、内容が同じ場合はスキップ
            if [ -f "$dest_file" ] && diff -q "$source_file" "$dest_file" > /dev/null 2>&1; then
                log_debug "$env_file: 既に最新版が存在（スキップ）"
                continue
            fi
            
            # ファイル内容を読み込み
            local content=$(cat "$source_file")
            
            # テンプレート変数の置換
            if [ "$AUTO_TEMPLATE_VARS" = "true" ]; then
                # ブランチ名に特殊文字が含まれる場合のためにsed区切り文字を変更
                content=$(echo "$content" | sed "s|{{ BRANCH_NAME }}|$current_branch|g")
                
                # DATABASE_PATHの特別処理
                if [[ "$current_branch" != "main" && "$current_branch" != "master" && "$current_branch" != "develop" ]]; then
                    local branch_safe=$(echo "$current_branch" | sed 's/[^a-zA-Z0-9_-]/_/g')
                    content=$(echo "$content" | sed "s|data/app\.db|data/${branch_safe}_app.db|g")
                fi
            fi
            
            # ファイルに書き込み
            echo "$content" > "$dest_file"
            copied_files+=("$env_file")
            log_success "コピー完了: $env_file"
            
        else
            log_debug "$env_file: メインリポジトリにファイルが存在しません"
        fi
    done
    
    if [ ${#copied_files[@]} -eq 0 ]; then
        log_warning "コピーされた環境変数ファイルはありません"
    else
        log_success "環境変数ファイルのコピーが完了しました (${#copied_files[@]}個)"
    fi
}

# 依存関係のインストール
install_dependencies() {
    if [ ! -f "package.json" ]; then
        log_debug "package.jsonが見つかりません。依存関係のインストールをスキップします。"
        return
    fi
    
    log_info "依存関係をインストール中..."
    
    # パッケージマネージャーを自動検出
    if [ -f "package-lock.json" ]; then
        npm install > /dev/null 2>&1
    elif [ -f "yarn.lock" ]; then
        yarn install > /dev/null 2>&1
    elif [ -f "pnpm-lock.yaml" ]; then
        pnpm install > /dev/null 2>&1
    else
        npm install > /dev/null 2>&1
    fi
    
    if [ $? -eq 0 ]; then
        log_success "依存関係のインストール完了"
    else
        log_error "依存関係のインストールに失敗しました"
    fi
}

# セットアップ完了メッセージ
show_setup_complete() {
    local current_path=$(pwd)
    local current_branch=$(git branch --show-current)
    
    echo ""
    echo "🎉 worktree セットアップ完了!"
    echo ""
    echo "📁 作業ディレクトリ: $current_path"
    echo "🌿 ブランチ: $current_branch"
    echo ""
    echo "次のステップ:"
    echo "  1. 環境変数ファイルの内容を確認・編集"
    echo "  2. 開発開始: npm run dev"
    echo ""
}

# メイン処理
main() {
    log_debug "post-checkout フックが実行されました"
    log_debug "パラメータ: OLD_HEAD=$OLD_HEAD, NEW_HEAD=$NEW_HEAD, BRANCH_CHECKOUT=$BRANCH_CHECKOUT"
    
    # ブランチチェックアウトでない場合は何もしない
    if [ "$BRANCH_CHECKOUT" != "1" ]; then
        log_debug "ブランチチェックアウトではないため、処理をスキップします"
        exit 0
    fi
    
    # worktree作成でない場合は何もしない
    if ! is_worktree_creation; then
        log_debug "worktree作成ではないため、処理をスキップします"
        exit 0
    fi
    
    # 自動セットアップが無効な場合
    if [ "$AUTO_ENV_COPY" != "true" ]; then
        log_info "自動環境セットアップが無効になっています"
        exit 0
    fi
    
    log_info "新しいworktreeを検出しました。自動セットアップを開始します..."
    
    # メインリポジトリのパスを取得
    local main_repo_path=$(get_main_repo_path)
    
    if [ -z "$main_repo_path" ] || [ ! -d "$main_repo_path" ]; then
        log_error "メインリポジトリのパスを取得できませんでした"
        exit 1
    fi
    
    # 環境変数ファイルをコピー
    copy_env_files "$main_repo_path"
    
    # 依存関係のインストール
    if [ "$AUTO_NPM_INSTALL" = "true" ]; then
        install_dependencies
    fi
    
    # セットアップ完了メッセージ
    show_setup_complete
}

# エラーが発生した場合の処理
trap 'log_error "post-checkout フックでエラーが発生しました"; exit 1' ERR

# メイン処理を実行
main "$@"